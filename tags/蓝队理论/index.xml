<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>蓝队理论 on write-up</title>
    <link>https://xxxhidexxx.github.io/tags/%E8%93%9D%E9%98%9F%E7%90%86%E8%AE%BA/</link>
    <description>Recent content in 蓝队理论 on write-up</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>null</copyright>
    <lastBuildDate>Sat, 18 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xxxhidexxx.github.io/tags/%E8%93%9D%E9%98%9F%E7%90%86%E8%AE%BA/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>蓝队进阶攻略</title>
      <link>https://xxxhidexxx.github.io/posts/sec/hvv/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/hvv/</guid>
      <description>应急类问题 应急问题的回答公式 先隔离出现问题的主机；判断影响范围；找到漏洞源头；清除攻击载荷；安全加固，修复漏洞；溯源分析；输出报告。&#xA;根据具体情况选择性填充细节。&#xA;你到客户现场进行安全加固都要做哪些事 检查弱口令和未授权访问；确定开启了日志的审计功能；检查防火墙策略，关闭不必要的端口；停止不必要的服务，修改不必要的权限；检查系统补丁；更新中间件版本。&#xA;怎么判断设备告警是不是误报 看 ip 是否来自内网，是否为正常业务。记录正常业务的特征，方便后续判断，避免封禁 ip 影响业务。&#xA;看流量特征是否为恶意，根据具体的 payload 判断是否攻击成功。例如攻击者扫描返回 400，或者使用的 poc 是我们没有用到的组件，那么这些告警没有产生危害，封 ip 进行预防即可。&#xA;在封 ip 之前可以看一下这个 ip 的访问历史都是什么内容，可以在天眼中使用 sip eq x.x.x.x 进行过滤。&#xA;攻击者在外网，但是设备出现内网告警，怎么解释这种现象，怎么看到真实 ip 可能是安全设备误报，在安全设备采集数据的时候把一些 ip 转换成了内网 ip 导致告警显示的是内网，出现这种误报可能是安全设备在网络拓扑中的位置错了；可能是 ip 欺骗，例如 xff 请求头伪造；可能有 ssrf 漏洞可以访问内网；可能有失陷主机正在进行横向移动。&#xA;需要根据告警内容排查是否为误报。&#xA;可以通过 x-forwarded-for 看真实 ip，其中 xff 的几项分别为：真实 ip，代理 ip-1，代理 ip-2，&amp;hellip;&#xA;已知内网告警为真实威胁，你会怎么做 先判断是否为蜜罐。&#xA;根据告警信息定位出现问题的设备，路由器 arp 缓存表可以找内网 ip 对应的 mac 地址。&#xA;对告警的主机进行隔离，对影响范围内的主机进行排查。&#xA;清除攻击载荷。&#xA;根据日志进行分析和溯源，调查攻击方法，建立攻击者画像。&#xA;协助恢复业务，输出报告。&#xA;已知内网横向移动，怎么办 隔离失陷主机，备份环境，判断横向移动的影响范围。&#xA;判断攻击方式，查找漏洞源头，评估攻击者的目的。&#xA;清除后门，修复漏洞，安全加固。&#xA;查看蜜罐等安全设备和日志文件，进行溯源。</description>
    </item>
    <item>
      <title>应急响应流程和网络安全常识</title>
      <link>https://xxxhidexxx.github.io/posts/sec/pdcerf/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/pdcerf/</guid>
      <description>pdcerf：准备-检测-抑制-根除-恢复-总结。&#xA;准备 明确职责；梳理资产，梳理暴露面，关闭不必要的映射；检查弱口令和密码策略；更新漏洞补丁；确认资产开启了日志存储，可对日志进行监控、审计和溯源。&#xA;准备阶段首先要确定能够找到和打开日志文件。&#xA;https 加密原理，抓包工具怎么截获明文 https 报文 http/s 本身是加密通信的，我们在抓包工具里面看到的明文数据包，是抓包工具自动截获密钥之后解密的结果。&#xA;https 加密方式：先使用非对称加密传输 ssl 证书并建立连接，再使用对称加密传输数据。这里非对称加密意味着只有一方需要提供 ssl 证书。&#xA;http 不安全的原因：对称加密导致的中间人攻击，中间人查看和篡改请求包、响应包，或者跳转到恶意网站。&#xA;只使用非对称加密不可行的原因：传输效率太低了。&#xA;burpsuite 抓 https 明文的方法就是对自己进行一次中间人攻击，分别与浏览器和服务器建立 https 连接。能够对 https 报文进行加密解密，就叫建立 https 连接。&#xA;burp 先是截获了服务器给浏览器的公钥。然后在 burp 上生成公私钥，将 burp 的密钥发给浏览器。之前配置 burp 的时候浏览器已经导入了 burp 的证书，这样 burp 和浏览器建立了 https 连接，使用的是 burp 的密钥，所以 burp 可以解密看到明文的 https 请求。同理，burp 再与服务器建立 https 连接，可以看到明文 https 响应。&#xA;数据传输的过程中 burp 有两套对称加密的密钥，分别用来和浏览器/服务器进行加密通信。&#xA;其他工具例如 wireshark 也可以抓 https 明文，但是原理不同，wireshark 是先将浏览器 ssl 日志设置环境变量，再将 ssl 日志路径设置到 wireshark 里面，让 wireshark 读取 ssl，进行解密，整个过程只有一套密钥。</description>
    </item>
    <item>
      <title>攻击流量特征</title>
      <link>https://xxxhidexxx.github.io/posts/sec/char/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/char/</guid>
      <description>传统漏洞的流量特征 sql&amp;amp;xss 请求包里面有明文 payload，攻击者会尝试很多次，很明显的特征。&#xA;rce 这里只说最基础的，看到内网 ip 和 net user，curl，more，less 等 windows/linux 系统命令，或者 eval，system 等函数，则判断是 rce 攻击流量。&#xA;文件包含 看到 require/include 等函数判断是文件包含攻击流量。&#xA;任意文件 看到 /etc/passwd 等敏感目录，判断是任意文件读取/下载/删除攻击流量。&#xA;看到上传文件的包里面有明文木马等恶意代码，判断是任意文件上传攻击流量。&#xA;java 反序列化漏洞的流量特征 主要考虑 struts2、shiro、weblogic、log4j2、fastjson 等组件及其历史漏洞的流量特征。&#xA;java 反序列化数据传输 16 进制编码以 ac ed 00 05 开头，base64 编码为 rO0AB。&#xA;有的 Content-Type: application/x-serialization 直接说明是 java 序列化数据包。&#xA;shiro shiro 的 cookie 存在反序列化注入点。&#xA;shiro 的流量特征是 cookie 有 rememberme 字段并使用 base64 编码。&#xA;shiro550 和 shiro721 攻击方法的区别：550 密码撞库，721 填充攻击。&#xA;如果 shiro cookie 正确，则返回包不会有 set-cookie: rememberme</description>
    </item>
    <item>
      <title>OWASP Top 10 选讲</title>
      <link>https://xxxhidexxx.github.io/posts/sec/top10/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/top10/</guid>
      <description>这里对 OWASP 在 2013、2017、2021 年提出的十大常规漏洞的原理和防御进行选择性的总结。OWASP 是一个致力于网络安全的国际非盈利组织，OWASP Top 10 是定期更新的报告，概述了 Web 应用程序安全性的安全问题，重点关注 10 个最关键的风险。&#xA;ssrf 防御 ssrf （1）设置 url 白名单，限制内网 ip 的访问；&#xA;（2）禁用非常规协议和端口，例如禁用除 http/s 之外的协议、禁用除 80/443 之外的端口；&#xA;（3）统一报错信息，避免根据报错信息的不同判断内网 ip 端口的开放状态。&#xA;利用 ssrf （1）dict 协议泄露了软件版本；&#xA;（2）file 协议读取敏感文件；&#xA;（3）gopher 协议反弹 shell；&#xA;（4）http/s 协议扫描内网端口。&#xA;ssrf 出现的场景 凡是用户输入的 url 和服务器进行交互的地方都可能存在 ssrf。例如：（1）用 url 分享网页信息；（2）在线翻译/转码；（3）图片加载/下载；（4）图片/文章的收藏；（5）未授权访问的页面里面有 ssrf；（6）url 锚点包含 ssrf。&#xA;ssrf 绕过限制 ip rebind&#xA;sql 注入 sql 注入如何判断数据库类型 (1) 从语言习惯判断。&#xA;asp：SQL Server，Access&#xA;.net ：SQL Server&#xA;php：Mysql，PostgreSql&#xA;java：Oracle，Mysql&#xA;（2）从默认端口判断。&#xA;Mysql: 3306</description>
    </item>
  </channel>
</rss>
